import * as FS from 'node:fs/promises'
import * as Path from 'node:path'
import { deleteFiles } from '../lib/deleteFiles.js'
import { directories, type Example } from './helpers.js'

export const generateTests = async (examples: Example[]) => {
  // Handle case of renaming or deleting examples.
  await Promise.all([
    deleteFiles({ pattern: `${directories.outputs}/*.output.test.txt` }),
    deleteFiles({ pattern: `${directories.examples}/*.output.test.txt` }),
    deleteFiles({ pattern: `./tests/examples/*.test.ts` }),
  ])

  const outputDir = Path.join(process.cwd(), `./tests/examples`)

  await Promise.all(examples.map(async (example) => {
    const snapshotFileName = `../../${example.file.path.dir}/__outputs__/${example.file.name}.output${
      example.output.encoder ? `.test` : ``
    }.txt`
    const exampleFilePath = `./examples/${example.file.name}.ts`
    const code = `// @vitest-environment node

// WARNING:
// This test is generated by scripts/generate-example-derivatives/generate.ts
// Do not modify this file directly.

import { runExample } from '../../scripts/generate-examples-derivatives/helpers.js'
import { expect, test } from 'vitest'${
      example.output.encoder
        ? `\nimport { encode } from '${
          Path.relative(outputDir, example.output.encoder.filePath.replace(`.ts`, `.js`))
        }'`
        : ``
    }

test(\`${example.file.name}\`, async () => {
  const exampleResult = await runExample(\`${exampleFilePath}\`)
  // Examples should output their data results.
  const exampleResultMaybeEncoded = ${example.output.encoder ? `encode(exampleResult)` : `exampleResult`} 
  // If ever outputs vary by Node version, you can use this to snapshot by Node version.
  // const nodeMajor = process.version.match(/v(\\d+)/)?.[1] ?? \`unknown\`
  await expect(exampleResultMaybeEncoded).toMatchFileSnapshot(\`${snapshotFileName}\`)
})
`
    await FS.writeFile(Path.join(outputDir, `${example.file.name}.test.ts`), code)
  }))

  console.log(`Generated a test for each example.`)
}
