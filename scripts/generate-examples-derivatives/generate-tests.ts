import { globby } from 'globby'
import * as FS from 'node:fs/promises'
import * as Path from 'node:path'
import { deleteFiles } from '../lib/deleteFiles.js'
import { readFiles } from '../lib/readFiles.js'

export const generateTests = async () => {
  // Handle case of renaming or deleting examples.
  await deleteFiles({ pattern: `./tests/examples/*.test.ts` })

  const exampleFiles = await readFiles({
    pattern: `./examples/*.ts`,
    options: { ignore: [`./examples/$*`, `./examples/*.output.*`, `./examples/*.output-encoder.*`] },
  })
  const encoderFilePaths = await globby(`./examples/*.output-encoder.ts`)

  const outputDir = Path.join(process.cwd(), `./tests/examples`)

  await Promise.all(exampleFiles.map(async (file) => {
    const encoderFilePath = encoderFilePaths.find((encoderFilePath) =>
      encoderFilePath.match(new RegExp(`${file.name}.output-encoder.ts`)) !== null
    )
    const code = `// @vitest-environment node

// WARNING:
// This test is generated by scripts/generate-example-derivatives/generate.ts
// Do not modify this file directly.

import { execaCommand } from 'execa'
import stripAnsi from 'strip-ansi'
import { expect, test } from 'vitest'${
      encoderFilePath
        ? `\nimport { encode } from '${Path.relative(outputDir, encoderFilePath.replace(`.ts`, `.js`))}'`
        : ``
    }

test(\`${file.name}\`, async () => {
  const result = await execaCommand(\`pnpm tsx ./examples/${file.name}.ts\`)
  expect(result.exitCode).toBe(0)
  // Examples should output their data results.
  const exampleResult = ${encoderFilePath ? `encode(stripAnsi(result.stdout))` : `stripAnsi(result.stdout)`} 
  // If ever outputs vary by Node version, you can use this to snapshot by Node version.
  // const nodeMajor = process.version.match(/v(\\d+)/)?.[1] ?? \`unknown\`
  await expect(exampleResult).toMatchFileSnapshot(\`../../${file.path.dir}/${file.name}.output${
      encoderFilePath ? `.test` : ``
    }.txt\`)
})
`

    await FS.writeFile(Path.join(outputDir, `${file.name}.test.ts`), code)
  }))

  console.log(`Generated a test for each example.`)
}
