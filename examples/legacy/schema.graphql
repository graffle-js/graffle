union AccelerateStatus = AccelerateStatusDisabled | AccelerateStatusEnabled

type AccelerateStatusDisabled implements ProductStatus {
  enabled: Boolean!
}

type AccelerateStatusEnabled implements ProductStatus {
  enabled: Boolean!
}

type Count {
  number: Int!
}

"""
ISO 3166-1 graffle-2 country code
"""
enum CountryCode {
  AD
  AE
  AF
  AG
  AI
  AL
  AM
  AO
  AQ
  AR
  AS
  AT
  AU
  AW
  AX
  AZ
  BA
  BB
  BD
  BE
  BF
  BG
  BH
  BI
  BJ
  BL
  BM
  BN
  BO
  BQ
  BR
  BS
  BT
  BV
  BW
  BY
  BZ
  CA
  CC
  CD
  CF
  CG
  CH
  CI
  CK
  CL
  CM
  CN
  CO
  CR
  CU
  CV
  CW
  CX
  CY
  CZ
  DE
  DJ
  DK
  DM
  DO
  DZ
  EC
  EE
  EG
  EH
  ER
  ES
  ET
  FI
  FJ
  FK
  FM
  FO
  FR
  GA
  GB
  GD
  GE
  GF
  GG
  GH
  GI
  GL
  GM
  GN
  GP
  GQ
  GR
  GS
  GT
  GU
  GW
  GY
  HK
  HM
  HN
  HR
  HT
  HU
  ID
  IE
  IL
  IM
  IN
  IO
  IQ
  IR
  IS
  IT
  JE
  JM
  JO
  JP
  KE
  KG
  KH
  KI
  KM
  KN
  KP
  KR
  KW
  KY
  KZ
  LA
  LB
  LC
  LI
  LK
  LR
  LS
  LT
  LU
  LV
  LY
  MA
  MC
  MD
  ME
  MF
  MG
  MH
  MK
  ML
  MM
  MN
  MO
  MP
  MQ
  MR
  MS
  MT
  MU
  MV
  MW
  MX
  MY
  MZ
  NA
  NC
  NE
  NF
  NG
  NI
  NL
  NO
  NP
  NR
  NU
  NZ
  OM
  PA
  PE
  PF
  PG
  PH
  PK
  PL
  PM
  PN
  PR
  PS
  PT
  PW
  PY
  QA
  RE
  RO
  RS
  RU
  RW
  SA
  SB
  SC
  SD
  SE
  SG
  SH
  SI
  SJ
  SK
  SL
  SM
  SN
  SO
  SR
  SS
  ST
  SV
  SX
  SY
  SZ
  TC
  TD
  TF
  TG
  TH
  TJ
  TK
  TL
  TM
  TN
  TO
  TR
  TT
  TV
  TW
  TZ
  UA
  UG
  UM
  US
  UY
  UZ
  VA
  VC
  VE
  VG
  VI
  VN
  VU
  WF
  WS
  YE
  YT
  ZA
  ZM
  ZW
}

type DatabaseLink {
  connectionStringHint: String!
  id: ID!
  protocol: String!
  region: String
}

type DatabaseLinkNode implements Node {
  connectionStringHint: ID!
  displayName: String!
  id: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar Date

type Environment {
  accelerate: EnvironmentAccelerate!
  createdAt: Date!
  displayName: String!
  id: ID!
  isDefault: Boolean!
  project: Project!
  pulse: EnvironmentPulse!
  serviceKeys: [ServiceKey!]!
  tenantId: ID!
}

type EnvironmentAccelerate {
  databaseLink: DatabaseLink
  holds: [ProductHold!]!
  status: AccelerateStatus!
  usage(timeWindow: EnvironmentAccelerateUsageTimeWindowInput!): EnvironmentAccelerateUsage!
}

type EnvironmentAccelerateTimeSeriesPoints {
  queries: EnvironmentAccelerateUsageTimeSeriesPointsQueries!
  timestamps: [Date!]!
}

type EnvironmentAccelerateUsage {
  latency: EnvironmentAccelerateUsageLatency!
  overview: EnvironmentAccelerateUsageOverview!
  timeInterval: TimeInterval!
  timeSeries: EnvironmentAccelerateUsageTimeSeries!
}

type EnvironmentAccelerateUsageLatency {
  queries: EnvironmentAccelerateUsageLatencyQueries!
}

type EnvironmentAccelerateUsageLatencyQueries {
  cached: EnvironmentAccelerateUsageLatencyQuery!
  origin: EnvironmentAccelerateUsageLatencyQuery!
}

type EnvironmentAccelerateUsageLatencyQuery {
  count: Count!
  durationAverage: MetricValue!
  durationPercentiles: [Percentile!]!
}

type EnvironmentAccelerateUsageOverview {
  egress: EnvironmentAccelerateUsageOverviewEgress!
  queries: EnvironmentAccelerateUsageOverviewQueries!
}

type EnvironmentAccelerateUsageOverviewCacheHit {
  ratioToMiss: MetricValue!
}

type EnvironmentAccelerateUsageOverviewEgress {
  averageResponseSize: StorageValue!
  requestsServedFromOrigin: Count!
  total: StorageValue!
}

type EnvironmentAccelerateUsageOverviewQueries {
  cacheHit: EnvironmentAccelerateUsageOverviewCacheHit!
  cacheableCount: Count!
  totalCount: Count!
}

type EnvironmentAccelerateUsageTimeSeries {
  points: EnvironmentAccelerateTimeSeriesPoints!
}

type EnvironmentAccelerateUsageTimeSeriesPointsQueries {
  miss: [EnvironmentAccelerateUsageTimeSeriesPointsQuery!]
  none: [EnvironmentAccelerateUsageTimeSeriesPointsQuery!]
  swr: [EnvironmentAccelerateUsageTimeSeriesPointsQuery!]
  ttl: [EnvironmentAccelerateUsageTimeSeriesPointsQuery!]
}

type EnvironmentAccelerateUsageTimeSeriesPointsQuery {
  count: Count!
  timestamp: Date!
}

enum EnvironmentAccelerateUsageTimeWindowInput {
  last6h
  last7d
  last24h
  last30d
  last30m
}

type EnvironmentPulse {
  databaseLink: DatabaseLink
  status: PulseStatus!
}

interface Error {
  message: String!
}

type ErrorInternal implements Error {
  message: String!
}

type ErrorUser implements Error {
  message: String!
}

type ErrorUserBusinessDeleteWorkspaceOnPaidPlan implements Error {
  context: ErrorUserBusinessDeleteWorkspaceOnPaidPlanContext!
  message: String!
}

type ErrorUserBusinessDeleteWorkspaceOnPaidPlanContext {
  plan: Plan!
}

type ErrorUserBusinessNotAuthorized implements Error {
  message: String!
}

type ErrorUserBusinessPlanLimitHit implements Error {
  context: ErrorUserBusinessPlanLimitHitContext!
  message: String!
}

type ErrorUserBusinessPlanLimitHitContext {
  featureHandle: String
}

type ErrorUserBusinessResourceNotFound implements Error {
  context: ErrorUserBusinessResourceNotFoundContext!
  message: String!
}

type ErrorUserBusinessResourceNotFoundContext {
  id: ID
  typeName: ResourceType!
}

type ErrorUserBusinessUserAlreadyMemberOfOrganization implements Error {
  context: ErrorUserBusinessUserAlreadyMemberOfOrganizationContext!
  message: String!
}

type ErrorUserBusinessUserAlreadyMemberOfOrganizationContext {
  user: User!
  workspace: Workspace!
}

type ErrorUserInput implements Error {
  message: String!
}

interface Feature {
  displayName: String
  handle: FeatureHandle!
  id: ID!
  stripeProductId: String!
}

type FeatureAbstract implements Feature {
  displayName: String
  handle: FeatureHandle!
  id: ID!
  stripeProductId: String!
}

enum FeatureHandle {
  accelerateEgress
  acceleratePurgeCache
  accelerateQuery
  access
  createProject
  organizationRole
  platformSupport
}

type FeatureResourceAggregation implements Feature {
  displayName: String
  handle: FeatureHandle!
  id: ID!
  resource: String!
  scope: String!
  stripeProductId: String!
  valueResolver: FeatureResourceAggregationValueResolver!
}

type FeatureResourceAggregationValueResolver {
  type: FeatureResourceAggregationValueResolverType!
}

enum FeatureResourceAggregationValueResolverType {
  count
}

type FeatureResourceProperty implements Feature {
  displayName: String
  handle: FeatureHandle!
  id: ID!
  resource: String!
  scope: String!
  stripeProductId: String!
  valueResolver: FeatureResourcePropertyValueResolver!
}

type FeatureResourcePropertyValueResolver {
  field: String!
  type: FeatureValueType!
}

type FeatureValue implements Feature {
  displayName: String
  handle: FeatureHandle!
  id: ID!
  stripeProductId: String!
  valueType: FeatureValueType!
}

union FeatureValueType =
  | FeatureValueTypeBoolean
  | FeatureValueTypeEnum
  | FeatureValueTypeNumber
  | FeatureValueTypeString

type FeatureValueTypeBoolean {
  displayName: String!
}

type FeatureValueTypeEnum {
  displayName: String!
  members: [FeatureValueTypeEnumMember!]!
}

type FeatureValueTypeEnumMember {
  description: String
  value: String!
}

type FeatureValueTypeNumber {
  displayName: String!
}

type FeatureValueTypeString {
  displayName: String!
}

union Limit = LimitEnum | LimitNumber

type LimitEnum {
  allowed: [String!]!
}

type LimitNumber {
  amount: Int!
  type: NumberPredicateFnType!
}

type Me {
  user: User!
  workspaces(orderBy: WorkspaceOrderBy = {}): [Workspace!]!
}

enum MetricUnit {
  ms
  percent
}

type MetricValue {
  number: Float!
  unit: MetricUnit
}

type Mutation {
  accelerateCachePurge(input: MutationAccelerateCachePurgeInput!): MutationAccelerateCachePurgeResult!
  accelerateDisable(input: MutationAccelerateDisableInput!): MutationAccelerateDisableResult!
  accelerateEnable(input: MutationAccelerateEnableInput!): MutationAccelerateEnableResult!
  databaseLinkCreate(input: MutationDatabaseLinkCreateInput!): MutationDatabaseLinkCreateResult!
  databaseLinkDelete(input: MutationDatabaseLinkDeleteInput!): MutationDatabaseLinkDeleteResult!
  databaseLinkUpdate(input: MutationDatabaseLinkUpdateInput!): MutationDatabaseLinkUpdateResult!
  environmentCreate(input: MutationEnvironmentCreateInput!): MutationEnvironmentCreateResult!
  environmentDelete(input: MutationEnvironmentDeleteInput!): MutationEnvironmentDeleteResult!
  environmentUpdate(input: MutationEnvironmentUpdateInput!): MutationEnvironmentUpdateResult!
  projectCreate(input: MutationProjectCreateInput!): MutationProjectCreateResult!
  projectDelete(input: MutationProjectDeleteInput!): MutationProjectDeleteResult!
  projectUpdate(input: MutationProjectUpdateInput!): MutationProjectUpdateResult!
  pulseDisable(input: MutationPulseDisableInput!): MutationPulseDisableResult!
  pulseEnable(input: MutationPulseEnableInput!): MutationPulseEnableResult!
  serviceKeyCreate(input: MutationServiceKeyCreateInput!): MutationServiceKeyCreateResult!
  serviceKeyDelete(input: MutationServiceKeyDeleteInput!): MutationServiceKeyDeleteResult!
  userUpdate(input: MutationUserUpdateInput!): MutationUserUpdateResult!
  userUpdateDefaultWorkspace(
    input: MutationUserUpdateDefaultWorkspaceInput!
  ): MutationUserUpdateDefaultWorkspaceResult!
  workspaceCreate(input: MutationWorkspaceCreateInput!): MutationWorkspaceCreateResult!
  workspaceDelete(input: MutationWorkspaceDeleteInput!): MutationWorkspaceDeleteResult!
  workspaceMembershipCreate(
    input: MutationWorkspaceMembershipCreateInput!
  ): MutationWorkspaceMembershipCreateResult!
  workspaceMembershipDelete(
    input: MutationWorkspaceMembershipDeleteInput!
  ): MutationWorkspaceMembershipDeleteResult!
  workspacePlanSubscriptionChange(
    input: MutationWorkspacePlanSubscriptionChangeInput!
  ): MutationWorkspacePlanSubscriptionChangeResult!
  workspaceUpdate(input: MutationWorkspaceUpdateInput!): MutationWorkspaceUpdateResult!
  workspaceUpdateBillingAddress(
    input: MutationWorkspaceUpdateBillingAddressInput!
  ): MutationWorkspaceUpdateBillingAddressResult!
  workspaceUpdateBillingEmail(
    input: MutationWorkspaceUpdateBillingEmailInput!
  ): MutationWorkspaceUpdateBillingEmailResult!
}

input MutationAccelerateCachePurgeInput {
  environmentId: ID!
}

union MutationAccelerateCachePurgeResult = ErrorInternal | SideEffectConfirmation

input MutationAccelerateDisableInput {
  environmentId: ID!
}

union MutationAccelerateDisableResult = ErrorInternal | SideEffectConfirmation

input MutationAccelerateEnableInput {
  databaseLinkId: ID!
}

union MutationAccelerateEnableResult = ErrorInternal | SideEffectConfirmation

input MutationDatabaseLinkCreateInput {
  connectionString: String!
  displayName: String
  environmentId: ID!
  regionId: String
}

union MutationDatabaseLinkCreateResult = DatabaseLink | ErrorInternal | ErrorUserBusinessResourceNotFound

input MutationDatabaseLinkDeleteInput {
  id: ID!
}

union MutationDatabaseLinkDeleteResult = DatabaseLinkNode | ErrorInternal | ErrorUserBusinessResourceNotFound

input MutationDatabaseLinkUpdateInput {
  connectionString: String!
  id: ID!
  regionId: String!
}

union MutationDatabaseLinkUpdateResult = DatabaseLink | ErrorInternal | ErrorUserBusinessResourceNotFound

input MutationEnvironmentCreateInput {
  displayName: String
  isDefault: Boolean
  projectId: ID!
}

union MutationEnvironmentCreateResult =
  | Environment
  | ErrorInternal
  | ErrorUserBusinessPlanLimitHit
  | ErrorUserBusinessResourceNotFound

input MutationEnvironmentDeleteInput {
  id: ID!
}

union MutationEnvironmentDeleteResult = Environment | ErrorInternal | ErrorUserBusinessResourceNotFound

input MutationEnvironmentUpdateInput {
  displayName: String
  id: ID!
  isDefault: Boolean
}

union MutationEnvironmentUpdateResult = Environment | ErrorInternal | ErrorUserBusinessResourceNotFound

input MutationProjectCreateInput {
  displayName: String
  workspaceId: ID!
}

union MutationProjectCreateResult =
  | ErrorInternal
  | ErrorUserBusinessPlanLimitHit
  | ErrorUserBusinessResourceNotFound
  | Project

input MutationProjectDeleteInput {
  id: ID!
}

union MutationProjectDeleteResult = ErrorInternal | ErrorUserBusinessResourceNotFound | ProjectNode

input MutationProjectUpdateInput {
  displayName: String
  id: ID!
}

union MutationProjectUpdateResult = ErrorInternal | ErrorUserBusinessResourceNotFound | Project

input MutationPulseDisableInput {
  environmentId: String!
}

union MutationPulseDisableResult = ErrorInternal | ErrorUserBusinessResourceNotFound | SideEffectConfirmation

input MutationPulseEnableInput {
  databaseLinkId: String!
}

union MutationPulseEnableResult = ErrorInternal | ErrorUser | SideEffectConfirmation

input MutationServiceKeyCreateInput {
  displayName: String
  environmentId: ID!
}

union MutationServiceKeyCreateResult = ErrorInternal | ErrorUserBusinessResourceNotFound | ServiceKeyWithValue

input MutationServiceKeyDeleteInput {
  id: String!
}

union MutationServiceKeyDeleteResult = ErrorInternal | ErrorUserBusinessResourceNotFound | ServiceKeyNode

input MutationUserUpdateDefaultWorkspaceInput {
  workspaceId: ID!
}

union MutationUserUpdateDefaultWorkspaceResult = ErrorInternal | ErrorUserBusinessResourceNotFound | User

input MutationUserUpdateInput {
  displayName: String
  id: ID!
}

union MutationUserUpdateResult = ErrorInternal | ErrorUserBusinessResourceNotFound | User

input MutationWorkspaceCreateInput {
  displayName: String
}

union MutationWorkspaceCreateResult = ErrorInternal | Workspace

input MutationWorkspaceDeleteInput {
  id: ID!
}

union MutationWorkspaceDeleteResult =
  | ErrorInternal
  | ErrorUserBusinessDeleteWorkspaceOnPaidPlan
  | ErrorUserBusinessResourceNotFound
  | WorkspaceNode

input MutationWorkspaceMembershipCreateInput {
  email: String!
  role: WorkspaceRole!
  workspaceId: ID!
}

union MutationWorkspaceMembershipCreateResult =
  | ErrorInternal
  | ErrorUserBusinessResourceNotFound
  | ErrorUserBusinessUserAlreadyMemberOfOrganization
  | WorkspaceMembership

input MutationWorkspaceMembershipDeleteInput {
  id: ID!
}

union MutationWorkspaceMembershipDeleteResult =
  | ErrorInternal
  | ErrorUserBusinessResourceNotFound
  | WorkspaceMembershipNode

input MutationWorkspacePlanSubscriptionChangeInput {
  targetPlanId: ID!
  workspaceId: ID!
}

union MutationWorkspacePlanSubscriptionChangeResult =
  | ErrorInternal
  | ErrorUserBusinessResourceNotFound
  | PlanSubscription

input MutationWorkspaceUpdateBillingAddressInput {
  address: PhysicalAddressInput!
  id: ID!
}

union MutationWorkspaceUpdateBillingAddressResult =
  | ErrorInternal
  | ErrorUserBusinessResourceNotFound
  | Workspace

input MutationWorkspaceUpdateBillingEmailInput {
  email: String!
  id: ID!
}

union MutationWorkspaceUpdateBillingEmailResult =
  | ErrorInternal
  | ErrorUserBusinessResourceNotFound
  | Workspace

input MutationWorkspaceUpdateInput {
  displayName: String
  id: ID!
}

union MutationWorkspaceUpdateResult = ErrorInternal | ErrorUserBusinessResourceNotFound | Workspace

interface Node {
  id: String!
}

enum NumberPredicateFnType {
  NumberPredicateFnEQ
  NumberPredicateFnGT
  NumberPredicateFnGTE
  NumberPredicateFnLT
  NumberPredicateFnLTE
}

interface Offer {
  context: OfferContext!
  id: ID!
  price: Price
}

type OfferAbstract implements Offer {
  context: OfferContext!
  feature: FeatureAbstract!
  id: ID!
  price: Price
}

union OfferContext = Plan | PlanSubscription

type OfferResourceAggregation implements Offer {
  context: OfferContext!
  feature: FeatureResourceAggregation!
  id: ID!
  limit: Limit
  price: Price
  timeInterval: OfferTimeInterval
}

type OfferResourceProperty implements Offer {
  context: OfferContext!
  feature: FeatureResourceProperty!
  id: ID!
  limit: Limit
  price: Price
  timeInterval: OfferTimeInterval
}

union OfferTimeInterval = OfferTimeIntervalCycle | OfferTimeIntervalPrevious

type OfferTimeIntervalCycle {
  ok: Boolean!
}

type OfferTimeIntervalPrevious {
  milliseconds: Int!
}

type OfferValue implements Offer {
  context: OfferContext!
  feature: FeatureValue!
  id: ID!
  limit: Limit
  price: Price
  value: String!
}

enum Order {
  asc
  desc
}

type PaymentMethod {
  card: PaymentMethodCard!
  id: ID!
  isDefault: Boolean!
}

type PaymentMethodCard {
  brand: PaymentMethodCardBrand!
  expiryMonth: Int!
  expiryYear: Int!
  id: ID!
  last4: String!
}

enum PaymentMethodCardBrand {
  amex
  diners
  discover
  eftpos_au
  jcb
  mastercard
  unionpay
  unknown
  visa
}

type Percentile {
  percentile: Int!
  value: MetricValue!
}

type PhysicalAddress {
  addressLine1: String
  addressLine2: String
  city: String
  country: String
  postalCodeOrZIP: String
  region: String
}

input PhysicalAddressInput {
  addressLine1: String
  addressLine2: String
  city: String
  country: CountryCode
  postalCodeOrZIP: String
  region: String
}

type Plan {
  displayName: String!
  handle: String!
  id: ID!
  isDefault: Boolean!
  isFree: Boolean!
  offers: PlanOffers!
  power: Int!
  selectable: Boolean!
  version: Int!
  versionIsLatest: Boolean!
  versions: PlanVersions!
}

type PlanOffers {
  accelerate: PlanOffersAccelerate!
  conductor: PlanOffersConductor!
  platform: PlanOffersPlatform!
}

type PlanOffersAccelerate {
  egress: OfferResourceProperty!
  purgeCache: OfferResourceAggregation!
  query: OfferResourceAggregation!
}

type PlanOffersConductor {
  createProject: OfferResourceAggregation!
  organizationRole: OfferResourceProperty!
}

type PlanOffersPlatform {
  access: OfferAbstract!
  support: OfferValue!
}

type PlanSubscription {
  createdAt: Date!
  id: ID!
  plan: Plan!
  stripeSubscriptionId: String
  stripeSubscriptionLineItems: [StripeSubscriptionLineItem!]!
  workspace: Workspace!
}

type PlanVersions {
  isLatest: Boolean!
  next: [Plan!]!
  previous: [Plan!]!
}

enum PreviousDateHandle {
  last6h
  last7d
  last24h
  last30d
  last30m
  startOfCycle
}

union Price = PriceConstant | PriceTiered

type PriceConstant implements PriceI {
  cents: Int!
  id: String!
  stripePriceId: ID!
}

interface PriceI {
  id: String!
  stripePriceId: ID!
}

type PriceTiered implements PriceI {
  id: String!
  stripePriceId: ID!
  tiers: [PriceTieredTier!]!
}

type PriceTieredTier {
  cents: Float!
  from: Int!
  to: Int
}

type ProductHold {
  createdAt: Int!
  expiresAt: Int!
  reason: String!
}

interface ProductStatus {
  enabled: Boolean!
}

type Project {
  accelerate: EnvironmentAccelerate!
  createdAt: Date!
  displayName: String!
  environments: [Environment!]!
  id: ID!
  pulse: EnvironmentPulse!
  workspace: Workspace!
}

type ProjectNode implements Node {
  createdAt: Date!
  displayName: String!
  id: String!
  workspaceId: ID!
}

union PulseStatus = PulseStatusDisabled | PulseStatusEnabled

type PulseStatusDisabled implements ProductStatus {
  enabled: Boolean!
}

type PulseStatusEnabled implements ProductStatus {
  enabled: Boolean!
  error: String
}

type Query {
  environment(id: ID!): QueryEnvironmentResult!
  me: Me!
  plan(handle: String, id: ID, version: Int): QueryPlanResult!
  project(id: ID!): QueryProjectResult!
  serviceKeys(projectId: ID!): [ServiceKey!]!
  system: System!
  user(auth0Id: ID, id: ID): User!
  workspace(id: ID!): QueryWorkspaceResult!
}

union QueryEnvironmentResult =
  | Environment
  | ErrorInternal
  | ErrorUserBusinessNotAuthorized
  | ErrorUserBusinessResourceNotFound

union QueryPlanResult = ErrorInternal | ErrorUserBusinessResourceNotFound | ErrorUserInput | Plan

union QueryProjectResult =
  | ErrorInternal
  | ErrorUserBusinessNotAuthorized
  | ErrorUserBusinessResourceNotFound
  | Project

union QueryWorkspaceResult =
  | ErrorInternal
  | ErrorUserBusinessNotAuthorized
  | ErrorUserBusinessResourceNotFound
  | Workspace

enum ResourceType {
  Project
  Workspace
}

type ServiceKey {
  createdAt: Date!
  displayName: String!
  id: ID!
  valueHint: String!
}

type ServiceKeyNode implements Node {
  displayName: String!
  id: String!
  valueHint: String!
}

type ServiceKeyWithValue {
  serviceKey: ServiceKey!
  value: ID!
}

type SideEffectConfirmation {
  ok: Boolean!
}

enum StorageUnit {
  bytes
}

type StorageValue {
  number: Float!
  unit: StorageUnit
}

type StripeSubscriptionLineItem {
  feature: FeatureHandle!
  id: ID!
}

type System {
  accelerate: SystemAccelerate!
  plans: [Plan!]!
  pulse: SystemPulse!
}

type SystemAccelerate {
  defaultRegion: SystemAccelerateRegion!
  regions: [SystemAccelerateRegion!]!
}

type SystemAccelerateRegion {
  displayName: String!
  id: ID!
}

type SystemPulse {
  defaultRegion: SystemAccelerateRegion!
  regions: [SystemAccelerateRegion!]!
}

type TimeInterval {
  from: Date!
  to: Date!
}

input TimeIntervalInput {
  fromDate: Date
  fromDateHandle: PreviousDateHandle
  toDate: Date
}

type UsageProductAccelerate {
  egress: UsageProductAccelerateFeatureEgress!
  request: UsageProductAccelerateFeatureRequest!
}

type UsageProductAccelerateFeatureEgress {
  averageResponseSize: Float!
  total: Float!
}

type UsageProductAccelerateFeatureRequest {
  all: UsageProductAccelerateFeatureRequestFilterAll!
  cacheHit: UsageProductAccelerateFeatureRequestFilterCacheHit!
}

type UsageProductAccelerateFeatureRequestFilterAll {
  count: Int!
}

type UsageProductAccelerateFeatureRequestFilterCacheHit {
  ratioToMiss: Int!
}

type User {
  displayName: String
  email: String!
  featureFlags: UserFeatureFlags!
  handle: String
  id: ID!
  image: String
  preferences: UserPreferences!
}

type UserFeatureFlags {
  adminDashboard: Boolean!
  mars: Boolean!
  mercury: Boolean!
  venus: Boolean!
}

type UserPreferences {
  """
  If null, user's default organization could have been deleted by another user.
  """
  defaultWorkspace: Workspace
}

type Workspace {
  billingAddress: PhysicalAddress
  billingEmail: String!
  createdAt: Date!
  displayName: String!
  id: ID!

  """
  Whether this is the last workspace of the user or not.
  """
  isUsersLastMembership: Boolean!
  memberships: [WorkspaceMembership!]!
  paymentMethods: [PaymentMethod!]!
  planSubscription: PlanSubscription!
  projects: [Project!]!
  stripeCustomerId: String!
  usage(timeInterval: TimeIntervalInput): WorkspaceUsage!
}

type WorkspaceMembership {
  id: ID!
  role: WorkspaceRole!
  user: User!
}

type WorkspaceMembershipNode implements Node {
  id: String!
  workspaceId: ID!
}

type WorkspaceNode implements Node {
  billingEmail: String!
  displayName: String!
  id: String!
}

input WorkspaceOrderBy {
  displayName: Order = asc
}

enum WorkspaceRole {
  accountant
  admin
  developer
  viewer
}

type WorkspaceUsage {
  accelerate: UsageProductAccelerate!
  timeInterval: TimeInterval!
}
