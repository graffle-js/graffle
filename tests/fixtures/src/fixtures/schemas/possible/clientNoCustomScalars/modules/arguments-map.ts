/**
 * ====================================================================================
 * GENERATED FILE - DO NOT EDIT MANUALLY
 * ====================================================================================
 *
 * Generated by: Graffle Code Generator
 * Source: src/generator/generators/ArgumentsMap.ts
 *
 * @module ArgumentsMap
 *
 * ArgumentsMap is a type-level structure that mirrors your GraphQL schema's argument structure for type-safe variable inference.
 *
 * @description
 *
 * ArgumentsMap provides a complete type-level representation of all arguments in your GraphQL schema. It enables the Static Document Builder to infer variable types and requirements from your selection sets when you use `$var` placeholders.
 *
 * This module is generated from your GraphQL schema and creates TypeScript interfaces that encode:
 *
 * - Which fields accept arguments
 * - The types and nullability of those arguments
 * - Nested argument structures in complex queries
 * - Input object types used in arguments
 *
 * The ArgumentsMap works in conjunction with the variable inference system to provide compile-time validation of your GraphQL variables without requiring manual type annotations.
 *
 * @remarks
 *
 * ArgumentsMap follows the Schema-Driven Data Map (SDDM) pattern used throughout Graffle's generated code. This pattern uses specific property names with precise meanings:
 *
 * - `operations`: Root types (query, mutation, subscription) that can be directly queried
 * - `directives`: Directive definitions with their arguments
 * - `types`: All types in the schema that have fields with arguments
 * - `f`: Fields map - contains all fields for a given type
 * - `a`: Arguments - direct arguments on a specific field
 * - `ad`: Arguments descendant - reference to a type that has fields with arguments
 * - `nt`: Named type - the GraphQL type name as a string literal
 * - `it`: Inline type - tuple encoding nullability: `[0]` for nullable, `[1]` for required, `[0, [1]]` for list types
 * - `$t`: TypeScript type - the fully resolved TypeScript type for the argument
 *
 * The `ad` property is particularly important: it enables type traversal through fields that don't have direct arguments but return types that do have fields with arguments. This allows the type system to properly track argument requirements across nested selections.
 *
 * @example Basic Field Arguments
 *
 * A simple field with optional scalar arguments:
 *
 * ```typescript
 * export interface Query extends $$Utilities.SchemaDrivenDataMap.OutputObject {
 *   readonly f: {
 *     readonly userById: {
 *       readonly a: {
 *         readonly id: {
 *           readonly nt: 'ID'
 *           readonly it: readonly [0]
 *           readonly $t: string | undefined
 *         }
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * @example Required Arguments
 *
 * A field with a required argument (non-null in GraphQL schema):
 *
 * ```typescript
 * readonly stringWithRequiredArg: {
 *   readonly a: {
 *     readonly string: {
 *       readonly nt: 'String'
 *       readonly it: readonly [1]
 *       readonly $t: string
 *     }
 *   }
 * }
 * ```
 *
 * @example List Arguments
 *
 * Arguments that accept arrays:
 *
 * ```typescript
 * readonly stringWithListArgRequired: {
 *   readonly a: {
 *     readonly ints: {
 *       readonly nt: 'Int'
 *       readonly it: readonly [1, [1]]
 *       readonly $t: readonly number[]
 *     }
 *   }
 * }
 * ```
 *
 * @example Nested Arguments with Descendant
 *
 * A field that doesn't have direct arguments but returns a type with fields that do:
 *
 * ```typescript
 * readonly objectNestedWithArgs: {
 *   readonly ad: ObjectNestedWithArgs
 * }
 * ```
 *
 * Where `ObjectNestedWithArgs` is defined elsewhere:
 *
 * ```typescript
 * export interface ObjectNestedWithArgs
 *   extends $$Utilities.SchemaDrivenDataMap.OutputObject
 * {
 *   readonly f: {
 *     readonly object: {
 *       readonly a: {
 *         readonly int: {
 *           readonly nt: 'Int'
 *           readonly it: readonly [0]
 *           readonly $t: number | undefined
 *         }
 *       }
 *     }
 *   }
 * }
 * ```
 *
 * @example Input Object Arguments
 *
 * Arguments that accept input objects:
 *
 * ```typescript
 * readonly stringWithArgInputObjectRequired: {
 *   readonly a: {
 *     readonly input: {
 *       readonly nt: 'InputObject'
 *       readonly it: readonly [1]
 *       readonly $t: TypeInputsIndex.InputObject
 *     }
 *   }
 * }
 * ```
 *
 * @see {@link https://graffle.js.org | Graffle Documentation}
 * @see {@link https://graffle.js.org/guides/document-builder | Static Document Builder Guide}
 */

import type * as $$Utilities from '#graffle/utilities-for-generated'
import type * as TypeInputsIndex from './type-inputs-index.js'

//
//
//
//
//
//
// ==================================================================================================
//                                            InputObject
// ==================================================================================================
//
//
//
//
//
//

export interface InputObject extends $$Utilities.SchemaDrivenDataMap.InputObject {
  readonly n: 'InputObject'
  readonly f: {
    readonly abcEnum: {
      readonly nt: 'ABCEnum'
      readonly it: readonly [0]
      readonly $t: TypeInputsIndex.ABCEnum | null | undefined
    }
    readonly date: {
      readonly nt: 'Date'
      readonly it: readonly [0]
      readonly $t: TypeInputsIndex.Date | null | undefined
    }
    readonly dateRequired: {
      readonly nt: 'Date'
      readonly it: readonly [1]
      readonly $t: TypeInputsIndex.Date
    }
    readonly id: {
      readonly nt: 'ID'
      readonly it: readonly [0]
      readonly $t: TypeInputsIndex.ID | null | undefined
    }
    readonly idRequired: {
      readonly nt: 'ID'
      readonly it: readonly [1]
      readonly $t: TypeInputsIndex.ID
    }
  }
}

export interface InputObjectCircular extends $$Utilities.SchemaDrivenDataMap.InputObject {
  readonly n: 'InputObjectCircular'
  readonly f: {
    readonly circular: {
      readonly nt: 'InputObjectCircular'
      readonly it: readonly [0]
      readonly $t: TypeInputsIndex.InputObjectCircular | null | undefined
    }
    readonly date: {
      readonly nt: 'Date'
      readonly it: readonly [0]
      readonly $t: TypeInputsIndex.Date | null | undefined
    }
  }
}

export interface InputObjectEnum extends $$Utilities.SchemaDrivenDataMap.InputObject {
  readonly n: 'InputObjectEnum'
  readonly f: {
    readonly abcEnum: {
      readonly nt: 'ABCEnum'
      readonly it: readonly [0]
      readonly $t: TypeInputsIndex.ABCEnum | null | undefined
    }
  }
}

export interface InputObjectNested extends $$Utilities.SchemaDrivenDataMap.InputObject {
  readonly n: 'InputObjectNested'
  readonly f: {
    readonly InputObject: {
      readonly nt: 'InputObject'
      readonly it: readonly [0]
      readonly $t: TypeInputsIndex.InputObject | null | undefined
    }
  }
}

export interface InputObjectNestedNonNull extends $$Utilities.SchemaDrivenDataMap.InputObject {
  readonly n: 'InputObjectNestedNonNull'
  readonly f: {
    readonly InputObject: {
      readonly nt: 'InputObject'
      readonly it: readonly [1]
      readonly $t: TypeInputsIndex.InputObject
    }
  }
}

//
//
//
//
//
//
// ==================================================================================================
//                                            OutputObject
// ==================================================================================================
//
//
//
//
//
//

export interface ObjectNestedWithArgs extends $$Utilities.SchemaDrivenDataMap.OutputObject {
  readonly f: {
    readonly id: {
      readonly a: {
        readonly filter: {
          readonly nt: 'ID'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.ID | null | undefined
        }
      }
    }
    readonly object: {
      readonly a: {
        readonly boolean: {
          readonly nt: 'Boolean'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Boolean | null | undefined
        }
        readonly float: {
          readonly nt: 'Float'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Float | null | undefined
        }
        readonly int: {
          readonly nt: 'Int'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Int | null | undefined
        }
        readonly string: {
          readonly nt: 'String'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.String | null | undefined
        }
      }
    }
  }
}

//
//
//
//
//
//
// ==================================================================================================
//                                             Interface
// ==================================================================================================
//
//
//
//
//
//

// No Interface types with arguments in your schema.

//
//
//
//
//
//
// ==================================================================================================
//                                               Union
// ==================================================================================================
//
//
//
//
//
//

// No Union types with arguments in your schema.

//
//
//
//
//
//
// ==================================================================================================
//                                                Root
// ==================================================================================================
//
//
//
//
//
//

export interface Query extends $$Utilities.SchemaDrivenDataMap.OutputObject {
  readonly f: {
    readonly InputObjectNested: {
      readonly a: {
        readonly input: {
          readonly nt: 'InputObjectNested'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.InputObjectNested | null | undefined
        }
      }
    }
    readonly InputObjectNestedNonNull: {
      readonly a: {
        readonly input: {
          readonly nt: 'InputObjectNestedNonNull'
          readonly it: readonly [1]
          readonly $t: TypeInputsIndex.InputObjectNestedNonNull
        }
      }
    }
    readonly argInputObjectCircular: {
      readonly a: {
        readonly input: {
          readonly nt: 'InputObjectCircular'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.InputObjectCircular | null | undefined
        }
      }
    }
    readonly dateArg: {
      readonly a: {
        readonly date: {
          readonly nt: 'Date'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Date | null | undefined
        }
      }
    }
    readonly dateArgInputObject: {
      readonly a: {
        readonly input: {
          readonly nt: 'InputObject'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.InputObject | null | undefined
        }
      }
    }
    readonly dateArgList: {
      readonly a: {
        readonly date: {
          readonly nt: 'Date'
          readonly it: readonly [0, [1]]
          readonly $t: readonly TypeInputsIndex.Date[] | null | undefined
        }
      }
    }
    readonly dateArgNonNull: {
      readonly a: {
        readonly date: {
          readonly nt: 'Date'
          readonly it: readonly [1]
          readonly $t: TypeInputsIndex.Date
        }
      }
    }
    readonly dateArgNonNullList: {
      readonly a: {
        readonly date: {
          readonly nt: 'Date'
          readonly it: readonly [1, [0]]
          readonly $t: readonly TypeInputsIndex.Date[]
        }
      }
    }
    readonly dateArgNonNullListNonNull: {
      readonly a: {
        readonly date: {
          readonly nt: 'Date'
          readonly it: readonly [1, [1]]
          readonly $t: readonly TypeInputsIndex.Date[]
        }
      }
    }
    readonly error: {
      readonly a: {
        readonly case: {
          readonly nt: 'String'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.String | null | undefined
        }
      }
    }
    readonly interfaceHierarchyChildA: {
      readonly a: {
        readonly type: {
          readonly nt: 'ChildAInterfaceHierarchyMember'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.ChildAInterfaceHierarchyMember | null | undefined
        }
      }
    }
    readonly interfaceHierarchyChildB: {
      readonly a: {
        readonly type: {
          readonly nt: 'ChildBInterfaceHierarchyMember'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.ChildBInterfaceHierarchyMember | null | undefined
        }
      }
    }
    readonly interfaceHierarchyGrandparents: {
      readonly a: {
        readonly type: {
          readonly nt: 'GrandparentInterfaceHierarchyMember'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.GrandparentInterfaceHierarchyMember | null | undefined
        }
      }
    }
    readonly interfaceHierarchyParents: {
      readonly a: {
        readonly type: {
          readonly nt: 'ParentInterfaceHierarchyMember'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.ParentInterfaceHierarchyMember | null | undefined
        }
      }
    }
    readonly interfaceWithArgs: {
      readonly a: {
        readonly id: {
          readonly nt: 'ID'
          readonly it: readonly [1]
          readonly $t: TypeInputsIndex.ID
        }
      }
    }
    readonly objectNestedWithArgs: {
      readonly ad: ObjectNestedWithArgs
    }
    readonly objectWithArgs: {
      readonly a: {
        readonly boolean: {
          readonly nt: 'Boolean'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Boolean | null | undefined
        }
        readonly float: {
          readonly nt: 'Float'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Float | null | undefined
        }
        readonly id: {
          readonly nt: 'ID'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.ID | null | undefined
        }
        readonly int: {
          readonly nt: 'Int'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Int | null | undefined
        }
        readonly string: {
          readonly nt: 'String'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.String | null | undefined
        }
      }
    }
    readonly result: {
      readonly a: {
        readonly case: {
          readonly nt: 'Case'
          readonly it: readonly [1]
          readonly $t: TypeInputsIndex.Case
        }
      }
    }
    readonly resultNonNull: {
      readonly a: {
        readonly case: {
          readonly nt: 'Case'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Case | null | undefined
        }
      }
    }
    readonly stringWithArgEnum: {
      readonly a: {
        readonly ABCEnum: {
          readonly nt: 'ABCEnum'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.ABCEnum | null | undefined
        }
      }
    }
    readonly stringWithArgInputObject: {
      readonly a: {
        readonly input: {
          readonly nt: 'InputObject'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.InputObject | null | undefined
        }
      }
    }
    readonly stringWithArgInputObjectEnum: {
      readonly a: {
        readonly input: {
          readonly nt: 'InputObjectEnum'
          readonly it: readonly [1]
          readonly $t: TypeInputsIndex.InputObjectEnum
        }
      }
    }
    readonly stringWithArgInputObjectRequired: {
      readonly a: {
        readonly input: {
          readonly nt: 'InputObject'
          readonly it: readonly [1]
          readonly $t: TypeInputsIndex.InputObject
        }
      }
    }
    readonly stringWithArgs: {
      readonly a: {
        readonly boolean: {
          readonly nt: 'Boolean'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Boolean | null | undefined
        }
        readonly float: {
          readonly nt: 'Float'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Float | null | undefined
        }
        readonly id: {
          readonly nt: 'ID'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.ID | null | undefined
        }
        readonly int: {
          readonly nt: 'Int'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.Int | null | undefined
        }
        readonly string: {
          readonly nt: 'String'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.String | null | undefined
        }
      }
    }
    readonly stringWithListArg: {
      readonly a: {
        readonly ints: {
          readonly nt: 'Int'
          readonly it: readonly [0, [0]]
          readonly $t: readonly TypeInputsIndex.Int[] | null | undefined
        }
      }
    }
    readonly stringWithListArgRequired: {
      readonly a: {
        readonly ints: {
          readonly nt: 'Int'
          readonly it: readonly [1, [1]]
          readonly $t: readonly TypeInputsIndex.Int[]
        }
      }
    }
    readonly stringWithRequiredArg: {
      readonly a: {
        readonly string: {
          readonly nt: 'String'
          readonly it: readonly [1]
          readonly $t: TypeInputsIndex.String
        }
      }
    }
    readonly unionFooBarWithArgs: {
      readonly a: {
        readonly id: {
          readonly nt: 'ID'
          readonly it: readonly [0]
          readonly $t: TypeInputsIndex.ID | null | undefined
        }
      }
    }
  }
}

//
//
//
//
//
//
// ==================================================================================================
//                                                Root
// ==================================================================================================
//
//
//
//
//
//

export interface Mutation extends $$Utilities.SchemaDrivenDataMap.OutputObject {
  readonly f: {}
}

//
//
//
//
//
//
// ==================================================================================================
//                                               Index
// ==================================================================================================
//
//
//
//
//
//

export interface ArgumentsMap {
  operations: {
    query: Query
    mutation: Mutation
  }
  directives: {}
  types: {
    ObjectNestedWithArgs: ObjectNestedWithArgs
    Query: Query
    InputObject: InputObject
    InputObjectCircular: InputObjectCircular
    InputObjectEnum: InputObjectEnum
    InputObjectNested: InputObjectNested
    InputObjectNestedNonNull: InputObjectNestedNonNull
    Mutation: Mutation
  }
}
