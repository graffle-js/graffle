// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`schema2 1`] = `
"import { createPrefilled } from '../../../../../src/entrypoints/client.js'
import { $defaultSchemaUrl, $Index } from './SchemaRuntime.js'

export const create = createPrefilled(\`default\`, $Index, $defaultSchemaUrl)
"
`;

exports[`schema2 2`] = `
"export * as Graffle from './_.js'
"
`;

exports[`schema2 3`] = `
"// We import the global module for good measure although it is not clear it is always needed.
// It at least helps with Twoslash wherein without this import here Twoslash will not include the global module.
// In real TypeScript projects it seems the global module is included automatically. But there could be certain tsconfig
// setups where this still indeed does help.
import './modules/Global.js'

export { create } from './modules/Client.js'
export { isError } from './modules/Error.js'
export { Select } from './modules/Select.js'
"
`;

exports[`schema2 4`] = `
"type Include<T, U> = Exclude<T, Exclude<T, U>>
type ObjectWithTypeName = { __typename: string }
const ErrorObjectsTypeNameSelectedEnum = {
  ErrorOne: { __typename: 'ErrorOne' },
  ErrorTwo: { __typename: 'ErrorTwo' },
} as const

const ErrorObjectsTypeNameSelected = Object.values(ErrorObjectsTypeNameSelectedEnum)

type ErrorObjectsTypeNameSelected = (typeof ErrorObjectsTypeNameSelected)[number]
export const isError = <$Value>(value: $Value): value is Include<$Value, ErrorObjectsTypeNameSelected> => {
  return typeof value === \`object\` && value !== null && \`__typename\` in value
    && ErrorObjectsTypeNameSelected.some(_ => _.__typename === value.__typename)
}
"
`;

exports[`schema2 5`] = `
"import type { ResultSet } from '../../../../../src/entrypoints/schema.js'
import * as Data from './Data.js'
import type { Index } from './SchemaIndex.js'
import type * as SelectionSets from './SelectionSets.js'

//
//
//
//
//
//
// ==================================================================================================
//                                              Runtime
// ==================================================================================================
//
//
//
//
//
//
import { createSelect } from '../../../../../src/entrypoints/client.js'
export const Select = createSelect(Data.Name)

//
//
//
//
//
//
// ==================================================================================================
//                                             Buildtime
// ==================================================================================================
//
//
//
//
//
//

export namespace Select {
  // Root Types
  // ----------
  export type Mutation<$SelectionSet extends SelectionSets.Mutation> = ResultSet.Root<$SelectionSet, Index, 'Mutation'>
  export type Query<$SelectionSet extends SelectionSets.Query> = ResultSet.Root<$SelectionSet, Index, 'Query'>
  // Object Types
  // ------------
  export type Bar<$SelectionSet extends SelectionSets.Bar> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['Bar']
  >
  export type DateObject1<$SelectionSet extends SelectionSets.DateObject1> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['DateObject1']
  >
  export type DateObject2<$SelectionSet extends SelectionSets.DateObject2> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['DateObject2']
  >
  export type ErrorOne<$SelectionSet extends SelectionSets.ErrorOne> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['ErrorOne']
  >
  export type ErrorTwo<$SelectionSet extends SelectionSets.ErrorTwo> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['ErrorTwo']
  >
  export type Foo<$SelectionSet extends SelectionSets.Foo> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['Foo']
  >
  export type Object1<$SelectionSet extends SelectionSets.Object1> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['Object1']
  >
  export type Object1ImplementingInterface<$SelectionSet extends SelectionSets.Object1ImplementingInterface> =
    ResultSet.Object$<$SelectionSet, Index, Index['allTypes']['Object1ImplementingInterface']>
  export type Object2ImplementingInterface<$SelectionSet extends SelectionSets.Object2ImplementingInterface> =
    ResultSet.Object$<$SelectionSet, Index, Index['allTypes']['Object2ImplementingInterface']>
  export type ObjectNested<$SelectionSet extends SelectionSets.ObjectNested> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['ObjectNested']
  >
  export type ObjectUnion<$SelectionSet extends SelectionSets.ObjectUnion> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['ObjectUnion']
  >
  export type lowerCaseObject<$SelectionSet extends SelectionSets.lowerCaseObject> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['lowerCaseObject']
  >
  export type lowerCaseObject2<$SelectionSet extends SelectionSets.lowerCaseObject2> = ResultSet.Object$<
    $SelectionSet,
    Index,
    Index['allTypes']['lowerCaseObject2']
  >
  // Union Types
  // -----------
  export type DateUnion<$SelectionSet extends SelectionSets.DateUnion> = ResultSet.Union<
    $SelectionSet,
    Index,
    Index['allTypes']['DateUnion']
  >
  export type FooBarUnion<$SelectionSet extends SelectionSets.FooBarUnion> = ResultSet.Union<
    $SelectionSet,
    Index,
    Index['allTypes']['FooBarUnion']
  >
  export type Result<$SelectionSet extends SelectionSets.Result> = ResultSet.Union<
    $SelectionSet,
    Index,
    Index['allTypes']['Result']
  >
  export type lowerCaseUnion<$SelectionSet extends SelectionSets.lowerCaseUnion> = ResultSet.Union<
    $SelectionSet,
    Index,
    Index['allTypes']['lowerCaseUnion']
  >
  // Interface Types
  // ---------------
  export type DateInterface1<$SelectionSet extends SelectionSets.DateInterface1> = ResultSet.Interface<
    $SelectionSet,
    Index,
    Index['allTypes']['DateInterface1']
  >
  export type Error<$SelectionSet extends SelectionSets.Error> = ResultSet.Interface<
    $SelectionSet,
    Index,
    Index['allTypes']['Error']
  >
  export type Interface<$SelectionSet extends SelectionSets.Interface> = ResultSet.Interface<
    $SelectionSet,
    Index,
    Index['allTypes']['Interface']
  >
}
"
`;

exports[`schema2 6`] = `
"/* eslint-disable */
import type * as Data from './Data.js'
import type * as MethodsRoot from './MethodsRoot.js'
import type * as Schema from './SchemaBuildtime.js'

export interface Index {
  name: Data.Name
  RootTypesPresent: ['Query', 'Mutation']
  RootUnion: Schema.Root.Query | Schema.Root.Mutation
  Root: {
    Query: Schema.Root.Query
    Mutation: Schema.Root.Mutation
    Subscription: null
  }
  allTypes: {
    Mutation: Schema.Root.Mutation
    Query: Schema.Root.Query
    ABCEnum: Schema.Enum.ABCEnum
    Case: Schema.Enum.Case
    Bar: Schema.Object.Bar
    DateObject1: Schema.Object.DateObject1
    DateObject2: Schema.Object.DateObject2
    ErrorOne: Schema.Object.ErrorOne
    ErrorTwo: Schema.Object.ErrorTwo
    Foo: Schema.Object.Foo
    Object1: Schema.Object.Object1
    Object1ImplementingInterface: Schema.Object.Object1ImplementingInterface
    Object2ImplementingInterface: Schema.Object.Object2ImplementingInterface
    ObjectNested: Schema.Object.ObjectNested
    ObjectUnion: Schema.Object.ObjectUnion
    lowerCaseObject: Schema.Object.lowerCaseObject
    lowerCaseObject2: Schema.Object.lowerCaseObject2
    DateUnion: Schema.Union.DateUnion
    FooBarUnion: Schema.Union.FooBarUnion
    Result: Schema.Union.Result
    lowerCaseUnion: Schema.Union.lowerCaseUnion
    DateInterface1: Schema.Interface.DateInterface1
    Error: Schema.Interface.Error
    Interface: Schema.Interface.Interface
  }
  objects: {
    Bar: Schema.Object.Bar
    DateObject1: Schema.Object.DateObject1
    DateObject2: Schema.Object.DateObject2
    ErrorOne: Schema.Object.ErrorOne
    ErrorTwo: Schema.Object.ErrorTwo
    Foo: Schema.Object.Foo
    Object1: Schema.Object.Object1
    Object1ImplementingInterface: Schema.Object.Object1ImplementingInterface
    Object2ImplementingInterface: Schema.Object.Object2ImplementingInterface
    ObjectNested: Schema.Object.ObjectNested
    ObjectUnion: Schema.Object.ObjectUnion
    lowerCaseObject: Schema.Object.lowerCaseObject
    lowerCaseObject2: Schema.Object.lowerCaseObject2
  }
  unions: {
    DateUnion: Schema.Union.DateUnion
    FooBarUnion: Schema.Union.FooBarUnion
    Result: Schema.Union.Result
    lowerCaseUnion: Schema.Union.lowerCaseUnion
  }
  interfaces: {
    DateInterface1: Schema.Interface.DateInterface1
    Error: Schema.Interface.Error
    Interface: Schema.Interface.Interface
  }
  error: {
    objects: {
      ErrorOne: Schema.Object.ErrorOne
      ErrorTwo: Schema.Object.ErrorTwo
    }
    objectsTypename: {
      ErrorOne: { __typename: 'ErrorOne' }
      ErrorTwo: { __typename: 'ErrorTwo' }
    }
    rootResultFields: {
      Query: {
        result: 'result'
        resultNonNull: 'resultNonNull'
      }
      Mutation: {}
      Subscription: {}
    }
  }
}
"
`;

exports[`schema2 7`] = `
"import type * as $ from '../../../../../src/entrypoints/schema.js'
import type * as $Scalar from './Scalar.ts'

// ------------------------------------------------------------ //
//                             Root                             //
// ------------------------------------------------------------ //
export namespace Root {
  export type Mutation = $.Output.ObjectMutation<{
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
    idNonNull: $.Field<$Scalar.ID, null>
  }>

  export type Query = $.Output.ObjectQuery<{
    InputObjectNested: $.Field<
      $.Output.Nullable<$Scalar.ID>,
      $.Args<{
        input: $.Input.Field<$.Input.Nullable<InputObject.InputObjectNested>>
      }, true>
    >
    InputObjectNestedNonNull: $.Field<
      $.Output.Nullable<$Scalar.ID>,
      $.Args<{
        input: $.Input.Field<InputObject.InputObjectNestedNonNull>
      }, false>
    >
    /**
     * Query enum field documentation.
     */
    abcEnum: $.Field<$.Output.Nullable<Enum.ABCEnum>, null>
    date: $.Field<$.Output.Nullable<$Scalar.Date>, null>
    dateArg: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.Field<$.Input.Nullable<$Scalar.Date>>
      }, true>
    >
    dateArgInputObject: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        input: $.Input.Field<$.Input.Nullable<InputObject.InputObject>>
      }, true>
    >
    dateArgList: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.Field<$.Input.Nullable<$.Input.List<$Scalar.Date>>>
      }, true>
    >
    dateArgNonNull: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.Field<$Scalar.Date>
      }, false>
    >
    dateArgNonNullList: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.Field<$.Input.List<$.Input.Nullable<$Scalar.Date>>>
      }, false>
    >
    dateArgNonNullListNonNull: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.Field<$.Input.List<$Scalar.Date>>
      }, false>
    >
    dateInterface1: $.Field<$.Output.Nullable<Interface.DateInterface1>, null>
    dateList: $.Field<$.Output.Nullable<$.Output.List<$Scalar.Date>>, null>
    dateListNonNull: $.Field<$.Output.List<$Scalar.Date>, null>
    dateNonNull: $.Field<$Scalar.Date, null>
    dateObject1: $.Field<$.Output.Nullable<Object.DateObject1>, null>
    dateUnion: $.Field<$.Output.Nullable<Union.DateUnion>, null>
    error: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        case: $.Input.Field<$.Input.Nullable<$Scalar.String>>
      }, true>
    >
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
    idNonNull: $.Field<$Scalar.ID, null>
    interface: $.Field<$.Output.Nullable<Interface.Interface>, null>
    interfaceNonNull: $.Field<Interface.Interface, null>
    interfaceWithArgs: $.Field<
      $.Output.Nullable<Interface.Interface>,
      $.Args<{
        id: $.Input.Field<$Scalar.ID>
      }, false>
    >
    listInt: $.Field<$.Output.Nullable<$.Output.List<$.Output.Nullable<$Scalar.Int>>>, null>
    listIntNonNull: $.Field<$.Output.List<$Scalar.Int>, null>
    listListInt: $.Field<
      $.Output.Nullable<$.Output.List<$.Output.Nullable<$.Output.List<$.Output.Nullable<$Scalar.Int>>>>>,
      null
    >
    listListIntNonNull: $.Field<$.Output.List<$.Output.List<$Scalar.Int>>, null>
    lowerCaseUnion: $.Field<$.Output.Nullable<Union.lowerCaseUnion>, null>
    object: $.Field<$.Output.Nullable<Object.Object1>, null>
    objectList: $.Field<$.Output.Nullable<$.Output.List<Object.Object1>>, null>
    objectListNonNull: $.Field<$.Output.List<Object.Object1>, null>
    objectNested: $.Field<$.Output.Nullable<Object.ObjectNested>, null>
    objectNonNull: $.Field<Object.Object1, null>
    objectWithArgs: $.Field<
      $.Output.Nullable<Object.Object1>,
      $.Args<{
        boolean: $.Input.Field<$.Input.Nullable<$Scalar.Boolean>>
        float: $.Input.Field<$.Input.Nullable<$Scalar.Float>>
        id: $.Input.Field<$.Input.Nullable<$Scalar.ID>>
        int: $.Input.Field<$.Input.Nullable<$Scalar.Int>>
        string: $.Input.Field<$.Input.Nullable<$Scalar.String>>
      }, true>
    >
    result: $.Field<
      $.Output.Nullable<Union.Result>,
      $.Args<{
        case: $.Input.Field<Enum.Case>
      }, false>
    >
    resultNonNull: $.Field<
      Union.Result,
      $.Args<{
        case: $.Input.Field<$.Input.Nullable<Enum.Case>>
      }, true>
    >
    string: $.Field<$.Output.Nullable<$Scalar.String>, null>
    stringWithArgEnum: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        ABCEnum: $.Input.Field<$.Input.Nullable<Enum.ABCEnum>>
      }, true>
    >
    stringWithArgInputObject: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        input: $.Input.Field<$.Input.Nullable<InputObject.InputObject>>
      }, true>
    >
    stringWithArgInputObjectRequired: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        input: $.Input.Field<InputObject.InputObject>
      }, false>
    >
    stringWithArgs: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        boolean: $.Input.Field<$.Input.Nullable<$Scalar.Boolean>>
        float: $.Input.Field<$.Input.Nullable<$Scalar.Float>>
        id: $.Input.Field<$.Input.Nullable<$Scalar.ID>>
        int: $.Input.Field<$.Input.Nullable<$Scalar.Int>>
        string: $.Input.Field<$.Input.Nullable<$Scalar.String>>
      }, true>
    >
    stringWithListArg: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        ints: $.Input.Field<$.Input.Nullable<$.Input.List<$.Input.Nullable<$Scalar.Int>>>>
      }, true>
    >
    stringWithListArgRequired: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        ints: $.Input.Field<$.Input.List<$Scalar.Int>>
      }, false>
    >
    stringWithRequiredArg: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        string: $.Input.Field<$Scalar.String>
      }, false>
    >
    unionFooBar: $.Field<$.Output.Nullable<Union.FooBarUnion>, null>
    unionFooBarNonNull: $.Field<Union.FooBarUnion, null>
    unionFooBarWithArgs: $.Field<
      $.Output.Nullable<Union.FooBarUnion>,
      $.Args<{
        id: $.Input.Field<$.Input.Nullable<$Scalar.ID>>
      }, true>
    >
    unionObject: $.Field<$.Output.Nullable<Object.ObjectUnion>, null>
    unionObjectNonNull: $.Field<Object.ObjectUnion, null>
  }>
}
// ------------------------------------------------------------ //
//                             Enum                             //
// ------------------------------------------------------------ //
export namespace Enum {
  /**
   * Enum documentation.
   *
   * Members
   * "A" - (DEPRECATED: Enum value A is deprecated.)
   * "B" - Enum B member documentation.
   * "C" - (DEPRECATED: Enum value C is deprecated.)
   */
  export type ABCEnum = $.Enum<'ABCEnum', ['A', 'B', 'C']>

  export type Case = $.Enum<'Case', ['ErrorOne', 'ErrorTwo', 'Object1']>
}
// ------------------------------------------------------------ //
//                         InputObject                          //
// ------------------------------------------------------------ //
export namespace InputObject {
  export type InputObject = $.InputObject<'InputObject', {
    date: $.Input.Field<$.Input.Nullable<$Scalar.Date>>
    dateRequired: $.Input.Field<$Scalar.Date>
    id: $.Input.Field<$.Input.Nullable<$Scalar.ID>>
    idRequired: $.Input.Field<$Scalar.ID>
  }, true>

  export type InputObjectNested = $.InputObject<'InputObjectNested', {
    InputObject: $.Input.Field<$.Input.Nullable<InputObject.InputObject>>
  }, true>

  export type InputObjectNestedNonNull = $.InputObject<'InputObjectNestedNonNull', {
    InputObject: $.Input.Field<InputObject.InputObject>
  }, false>
}
// ------------------------------------------------------------ //
//                          Interface                           //
// ------------------------------------------------------------ //
export namespace Interface {
  export type DateInterface1 = $.Interface<'DateInterface1', {
    date1: $.Field<$.Output.Nullable<$Scalar.Date>, null>
  }, [Object.DateObject1]>

  export type Error = $.Interface<'Error', {
    message: $.Field<$Scalar.String, null>
  }, [Object.ErrorOne, Object.ErrorTwo]>

  export type Interface = $.Interface<'Interface', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
  }, [Object.Object1ImplementingInterface, Object.Object2ImplementingInterface]>
}
// ------------------------------------------------------------ //
//                            Object                            //
// ------------------------------------------------------------ //
export namespace Object {
  export type Bar = $.Object$2<'Bar', {
    int: $.Field<$.Output.Nullable<$Scalar.Int>, null>
  }>

  export type DateObject1 = $.Object$2<'DateObject1', {
    date1: $.Field<$.Output.Nullable<$Scalar.Date>, null>
  }>

  export type DateObject2 = $.Object$2<'DateObject2', {
    date2: $.Field<$.Output.Nullable<$Scalar.Date>, null>
  }>

  export type ErrorOne = $.Object$2<'ErrorOne', {
    infoId: $.Field<$.Output.Nullable<$Scalar.ID>, null>
    message: $.Field<$Scalar.String, null>
  }>

  export type ErrorTwo = $.Object$2<'ErrorTwo', {
    infoInt: $.Field<$.Output.Nullable<$Scalar.Int>, null>
    message: $.Field<$Scalar.String, null>
  }>

  /**
   * Object documentation.
   */
  export type Foo = $.Object$2<'Foo', {
    /**
     * Field documentation.
     *
     * @deprecated Field a is deprecated.
     */
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
  }>

  export type Object1 = $.Object$2<'Object1', {
    boolean: $.Field<$.Output.Nullable<$Scalar.Boolean>, null>
    float: $.Field<$.Output.Nullable<$Scalar.Float>, null>
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
    int: $.Field<$.Output.Nullable<$Scalar.Int>, null>
    string: $.Field<$.Output.Nullable<$Scalar.String>, null>
  }>

  export type Object1ImplementingInterface = $.Object$2<'Object1ImplementingInterface', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
    int: $.Field<$.Output.Nullable<$Scalar.Int>, null>
  }>

  export type Object2ImplementingInterface = $.Object$2<'Object2ImplementingInterface', {
    boolean: $.Field<$.Output.Nullable<$Scalar.Boolean>, null>
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
  }>

  export type ObjectNested = $.Object$2<'ObjectNested', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
    object: $.Field<$.Output.Nullable<Object.Object1>, null>
  }>

  export type ObjectUnion = $.Object$2<'ObjectUnion', {
    fooBarUnion: $.Field<$.Output.Nullable<Union.FooBarUnion>, null>
  }>

  export type lowerCaseObject = $.Object$2<'lowerCaseObject', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>, null>
  }>

  export type lowerCaseObject2 = $.Object$2<'lowerCaseObject2', {
    int: $.Field<$.Output.Nullable<$Scalar.Int>, null>
  }>
}
// ------------------------------------------------------------ //
//                            Union                             //
// ------------------------------------------------------------ //
export namespace Union {
  export type DateUnion = $.Union<'DateUnion', [Object.DateObject1, Object.DateObject2]>

  /**
   * Union documentation.
   */
  export type FooBarUnion = $.Union<'FooBarUnion', [Object.Bar, Object.Foo]>

  export type Result = $.Union<'Result', [Object.ErrorOne, Object.ErrorTwo, Object.Object1]>

  export type lowerCaseUnion = $.Union<'lowerCaseUnion', [Object.lowerCaseObject, Object.lowerCaseObject2]>
}
"
`;

exports[`schema2 8`] = `
"import type { Schema } from '../../../../../src/entrypoints/schema.js'
import * as CustomScalars from '../../../customScalarCodecs.js'

export * from '../../../../../src/layers/1_Schema/Hybrid/types/Scalar/Scalar.js'
export * from '../../../customScalarCodecs.js'
export { Date } from '../../../customScalarCodecs.js'

//
//
//
//
// CUSTOM SCALAR TYPE
// DATE
// --------------------------------------------------------------------------------------------------
//                                                Date
// --------------------------------------------------------------------------------------------------
//
//

export type Date = typeof CustomScalars.Date
// Without this we get error:
// "Exported type alias 'DateDecoded' has or is using private name 'Date'."
type Date_ = typeof CustomScalars.Date
export type DateDecoded = Schema.Scalar.GetDecoded<Date_>
export type DateEncoded = Schema.Scalar.GetEncoded<Date_>
"
`;

exports[`schema2 9`] = `
"/* eslint-disable */
import * as $ from '../../../../../src/entrypoints/schema.js'
import * as Data from './Data.js'
import * as $Scalar from './Scalar.js'
import type { Index } from './SchemaIndex.js'
export const $defaultSchemaUrl = undefined
export const ABCEnum = $.Enum(\`ABCEnum\`, [\`A\`, \`B\`, \`C\`])
export const Case = $.Enum(\`Case\`, [\`ErrorOne\`, \`ErrorTwo\`, \`Object1\`])
export const InputObject = $.InputObject(\`InputObject\`, {
  date: $.Input.Field($.Input.Nullable($Scalar.Date)),
  dateRequired: $.Input.Field($Scalar.Date),
  id: $.Input.Field($.Input.Nullable($Scalar.ID)),
  idRequired: $.Input.Field($Scalar.ID),
}, true)

export const InputObjectNested = $.InputObject(\`InputObjectNested\`, {
  InputObject: $.Input.Field(() => $.Input.Nullable(InputObject)),
}, true)

export const InputObjectNestedNonNull = $.InputObject(\`InputObjectNestedNonNull\`, {
  InputObject: $.Input.Field(() => InputObject),
}, false)
// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const Bar = $.Object$(\`Bar\`, {
  int: $.field($.Output.Nullable($Scalar.Int)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const DateObject1 = $.Object$(\`DateObject1\`, {
  date1: $.field($.Output.Nullable($Scalar.Date)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const DateObject2 = $.Object$(\`DateObject2\`, {
  date2: $.field($.Output.Nullable($Scalar.Date)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const ErrorOne = $.Object$(\`ErrorOne\`, {
  infoId: $.field($.Output.Nullable($Scalar.ID)),
  message: $.field($Scalar.String),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const ErrorTwo = $.Object$(\`ErrorTwo\`, {
  infoInt: $.field($.Output.Nullable($Scalar.Int)),
  message: $.field($Scalar.String),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const Foo = $.Object$(\`Foo\`, {
  id: $.field($.Output.Nullable($Scalar.ID)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const Object1 = $.Object$(\`Object1\`, {
  boolean: $.field($.Output.Nullable($Scalar.Boolean)),
  float: $.field($.Output.Nullable($Scalar.Float)),
  id: $.field($.Output.Nullable($Scalar.ID)),
  int: $.field($.Output.Nullable($Scalar.Int)),
  string: $.field($.Output.Nullable($Scalar.String)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const Object1ImplementingInterface = $.Object$(\`Object1ImplementingInterface\`, {
  id: $.field($.Output.Nullable($Scalar.ID)),
  int: $.field($.Output.Nullable($Scalar.Int)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const Object2ImplementingInterface = $.Object$(\`Object2ImplementingInterface\`, {
  boolean: $.field($.Output.Nullable($Scalar.Boolean)),
  id: $.field($.Output.Nullable($Scalar.ID)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const ObjectNested = $.Object$(\`ObjectNested\`, {
  id: $.field($.Output.Nullable($Scalar.ID)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  object: $.field($.Output.Nullable(() => Object1)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const ObjectUnion = $.Object$(\`ObjectUnion\`, {
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  fooBarUnion: $.field($.Output.Nullable(() => FooBarUnion)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const lowerCaseObject = $.Object$(\`lowerCaseObject\`, {
  id: $.field($.Output.Nullable($Scalar.ID)),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const lowerCaseObject2 = $.Object$(\`lowerCaseObject2\`, {
  int: $.field($.Output.Nullable($Scalar.Int)),
})
// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const DateUnion = $.Union(\`DateUnion\`, [DateObject1, DateObject2])

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const FooBarUnion = $.Union(\`FooBarUnion\`, [Bar, Foo])

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const Result = $.Union(\`Result\`, [ErrorOne, ErrorTwo, Object1])

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const lowerCaseUnion = $.Union(\`lowerCaseUnion\`, [lowerCaseObject, lowerCaseObject2])
export const DateInterface1 = $.Interface(\`DateInterface1\`, { date1: $.field($.Output.Nullable($Scalar.Date)) }, [
  DateObject1,
])
export const Error = $.Interface(\`Error\`, { message: $.field($Scalar.String) }, [ErrorOne, ErrorTwo])
export const Interface = $.Interface(\`Interface\`, { id: $.field($.Output.Nullable($Scalar.ID)) }, [
  Object1ImplementingInterface,
  Object2ImplementingInterface,
])
// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const Mutation = $.Object$(\`Mutation\`, {
  id: $.field($.Output.Nullable($Scalar.ID)),
  idNonNull: $.field($Scalar.ID),
})

// @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
export const Query = $.Object$(\`Query\`, {
  InputObjectNested: $.field(
    $.Output.Nullable($Scalar.ID),
    $.Args({ input: $.Input.Field($.Input.Nullable(InputObjectNested)) }, true),
  ),
  InputObjectNestedNonNull: $.field(
    $.Output.Nullable($Scalar.ID),
    $.Args({ input: $.Input.Field(InputObjectNestedNonNull) }, false),
  ),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  abcEnum: $.field($.Output.Nullable(ABCEnum)),
  date: $.field($.Output.Nullable($Scalar.Date)),
  dateArg: $.field(
    $.Output.Nullable($Scalar.Date),
    $.Args({ date: $.Input.Field($.Input.Nullable($Scalar.Date)) }, true),
  ),
  dateArgInputObject: $.field(
    $.Output.Nullable($Scalar.Date),
    $.Args({ input: $.Input.Field($.Input.Nullable(InputObject)) }, true),
  ),
  dateArgList: $.field(
    $.Output.Nullable($Scalar.Date),
    $.Args({ date: $.Input.Field($.Input.Nullable($.Input.List($Scalar.Date))) }, true),
  ),
  dateArgNonNull: $.field($.Output.Nullable($Scalar.Date), $.Args({ date: $.Input.Field($Scalar.Date) }, false)),
  dateArgNonNullList: $.field(
    $.Output.Nullable($Scalar.Date),
    $.Args({ date: $.Input.Field($.Input.List($.Input.Nullable($Scalar.Date))) }, false),
  ),
  dateArgNonNullListNonNull: $.field(
    $.Output.Nullable($Scalar.Date),
    $.Args({ date: $.Input.Field($.Input.List($Scalar.Date)) }, false),
  ),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  dateInterface1: $.field($.Output.Nullable(() => DateInterface1)),
  dateList: $.field($.Output.Nullable($.Output.List($Scalar.Date))),
  dateListNonNull: $.field($.Output.List($Scalar.Date)),
  dateNonNull: $.field($Scalar.Date),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  dateObject1: $.field($.Output.Nullable(() => DateObject1)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  dateUnion: $.field($.Output.Nullable(() => DateUnion)),
  error: $.field(
    $.Output.Nullable($Scalar.String),
    $.Args({ case: $.Input.Field($.Input.Nullable($Scalar.String)) }, true),
  ),
  id: $.field($.Output.Nullable($Scalar.ID)),
  idNonNull: $.field($Scalar.ID),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  interface: $.field($.Output.Nullable(() => Interface)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  interfaceNonNull: $.field(() => Interface),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  interfaceWithArgs: $.field($.Output.Nullable(() => Interface), $.Args({ id: $.Input.Field($Scalar.ID) }, false)),
  listInt: $.field($.Output.Nullable($.Output.List($.Output.Nullable($Scalar.Int)))),
  listIntNonNull: $.field($.Output.List($Scalar.Int)),
  listListInt: $.field(
    $.Output.Nullable($.Output.List($.Output.Nullable($.Output.List($.Output.Nullable($Scalar.Int))))),
  ),
  listListIntNonNull: $.field($.Output.List($.Output.List($Scalar.Int))),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  lowerCaseUnion: $.field($.Output.Nullable(() => lowerCaseUnion)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  object: $.field($.Output.Nullable(() => Object1)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  objectList: $.field($.Output.Nullable($.Output.List(() => Object1))),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  objectListNonNull: $.field($.Output.List(() => Object1)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  objectNested: $.field($.Output.Nullable(() => ObjectNested)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  objectNonNull: $.field(() => Object1),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  objectWithArgs: $.field(
    $.Output.Nullable(() => Object1),
    $.Args({
      boolean: $.Input.Field($.Input.Nullable($Scalar.Boolean)),
      float: $.Input.Field($.Input.Nullable($Scalar.Float)),
      id: $.Input.Field($.Input.Nullable($Scalar.ID)),
      int: $.Input.Field($.Input.Nullable($Scalar.Int)),
      string: $.Input.Field($.Input.Nullable($Scalar.String)),
    }, true),
  ),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  result: $.field($.Output.Nullable(() => Result), $.Args({ case: $.Input.Field(Case) }, false)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  resultNonNull: $.field(() => Result, $.Args({ case: $.Input.Field($.Input.Nullable(Case)) }, true)),
  string: $.field($.Output.Nullable($Scalar.String)),
  stringWithArgEnum: $.field(
    $.Output.Nullable($Scalar.String),
    $.Args({ ABCEnum: $.Input.Field($.Input.Nullable(ABCEnum)) }, true),
  ),
  stringWithArgInputObject: $.field(
    $.Output.Nullable($Scalar.String),
    $.Args({ input: $.Input.Field($.Input.Nullable(InputObject)) }, true),
  ),
  stringWithArgInputObjectRequired: $.field(
    $.Output.Nullable($Scalar.String),
    $.Args({ input: $.Input.Field(InputObject) }, false),
  ),
  stringWithArgs: $.field(
    $.Output.Nullable($Scalar.String),
    $.Args({
      boolean: $.Input.Field($.Input.Nullable($Scalar.Boolean)),
      float: $.Input.Field($.Input.Nullable($Scalar.Float)),
      id: $.Input.Field($.Input.Nullable($Scalar.ID)),
      int: $.Input.Field($.Input.Nullable($Scalar.Int)),
      string: $.Input.Field($.Input.Nullable($Scalar.String)),
    }, true),
  ),
  stringWithListArg: $.field(
    $.Output.Nullable($Scalar.String),
    $.Args({ ints: $.Input.Field($.Input.Nullable($.Input.List($.Input.Nullable($Scalar.Int)))) }, true),
  ),
  stringWithListArgRequired: $.field(
    $.Output.Nullable($Scalar.String),
    $.Args({ ints: $.Input.Field($.Input.List($Scalar.Int)) }, false),
  ),
  stringWithRequiredArg: $.field(
    $.Output.Nullable($Scalar.String),
    $.Args({ string: $.Input.Field($Scalar.String) }, false),
  ),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  unionFooBar: $.field($.Output.Nullable(() => FooBarUnion)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  unionFooBarNonNull: $.field(() => FooBarUnion),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  unionFooBarWithArgs: $.field(
    $.Output.Nullable(() => FooBarUnion),
    $.Args({ id: $.Input.Field($.Input.Nullable($Scalar.ID)) }, true),
  ),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  unionObject: $.field($.Output.Nullable(() => ObjectUnion)),
  // @ts-ignore - circular types cannot infer. Ignore in case there are any. This comment is always added, it does not indicate if this particular type could infer or not.
  unionObjectNonNull: $.field(() => ObjectUnion),
})
export const $Index: Index = {
  name: Data.Name,
  RootTypesPresent: ['Query', 'Mutation'] as const,
  RootUnion: undefined as any, // Type level only.
  Root: {
    Query,
    Mutation,
    Subscription: null,
  },
  allTypes: {
    Mutation,
    Query,
    DateUnion,
    FooBarUnion,
    Result,
    lowerCaseUnion,
    Bar,
    DateObject1,
    DateObject2,
    ErrorOne,
    ErrorTwo,
    Foo,
    Object1,
    Object1ImplementingInterface,
    Object2ImplementingInterface,
    ObjectNested,
    ObjectUnion,
    lowerCaseObject,
    lowerCaseObject2,
    DateInterface1,
    Error,
    Interface,
    ABCEnum,
    Case,
  },
  objects: {
    Bar,
    DateObject1,
    DateObject2,
    ErrorOne,
    ErrorTwo,
    Foo,
    Object1,
    Object1ImplementingInterface,
    Object2ImplementingInterface,
    ObjectNested,
    ObjectUnion,
    lowerCaseObject,
    lowerCaseObject2,
  },
  unions: {
    DateUnion,
    FooBarUnion,
    Result,
    lowerCaseUnion,
  },
  interfaces: {
    DateInterface1,
    Error,
    Interface,
  },
  error: {
    objects: {
      ErrorOne,
      ErrorTwo,
    },
    objectsTypename: {
      ErrorOne: { __typename: 'ErrorOne' },
      ErrorTwo: { __typename: 'ErrorTwo' },
    },
    rootResultFields: {
      Query: {
        result: 'result' as const,
        resultNonNull: 'resultNonNull' as const,
      },
      Mutation: {},
      Subscription: {},
    },
  },
}
"
`;
