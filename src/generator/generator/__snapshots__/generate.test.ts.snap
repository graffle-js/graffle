// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`kitchen-sink generated modules > _.ts 1`] = `
"// We import the global module for good measure although it is not clear it is always needed.
// It at least helps with Twoslash wherein without this import here Twoslash will not include the global module.
// In real TypeScript projects it seems the global module is included automatically. But there could be certain tsconfig
// setups where this still indeed does help.
import './modules/Global.js'

export { create } from './modules/Client.js'
export { schemaDrivenDataMap } from './modules/SchemaDrivenDataMap.js'
export { Select } from './modules/Select.js'
export * as SelectionSets from './modules/SelectionSets.js'
"
`;

exports[`kitchen-sink generated modules > __.ts 1`] = `
"export * as Graffle from './_.js'
"
`;

exports[`kitchen-sink generated modules > modules/Client.ts 1`] = `
"import { createPrefilled } from '../../../../../../src/entrypoints/client.js'
import { defaultSchemaUrl } from './Data.js'
import { Name } from './Data.js'
import { schemaDrivenDataMap } from './SchemaDrivenDataMap.js'

export const create = createPrefilled(Name, schemaDrivenDataMap, defaultSchemaUrl)
"
`;

exports[`kitchen-sink generated modules > modules/Data.ts 1`] = `
"export const Name = \`default\`
export type Name = 'default'

export const defaultSchemaUrl = undefined
"
`;

exports[`kitchen-sink generated modules > modules/Global.ts 1`] = `
"import type * as Data from './Data.js'
import type * as MethodsDocument from './MethodsDocument.js'
import type * as MethodsRoot from './MethodsRoot.js'
import type * as MethodsSelect from './MethodsSelect.js'
import type * as $Scalar from './Scalar.js'
import type { Schema } from './Schema.js'

declare global {
  export namespace GraffleGlobal {
    export interface Clients {
      default: {
        name: Data.Name
        schema: Schema
        interfaces: {
          MethodsSelect: MethodsSelect.$MethodsSelect
          Document: MethodsDocument.BuilderMethodsDocumentFn
          Root: MethodsRoot.BuilderMethodsRootFn
        }
        defaultSchemaUrl: null
      }
    }
  }
}
"
`;

exports[`kitchen-sink generated modules > modules/MethodsDocument.ts 1`] = `
"import type * as Utilities from '../../../../../../src/entrypoints/utilities-for-generated.js'
import type { Schema } from './Schema.js'
import type * as SelectionSets from './SelectionSets.js'

export interface Document<$Context extends Utilities.ClientContext> {
  <$Document>(
    document: Utilities.ExactNonEmpty<$Document, SelectionSets.$Document<$Context['scalars']>>,
  ): Utilities.DocumentRunner<
    $Context,
    Schema,
    // @ts-expect-error We use Exact instead of constraint on this function. TypeScript does not see that as
    // Satisfying the constraint on the DocumentRunner type.
    $Document
  >
}

export interface BuilderMethodsDocumentFn extends Utilities.TypeFunction.Fn {
  // @ts-expect-error parameter is Untyped.
  return: Document<this['params']>
}
"
`;

exports[`kitchen-sink generated modules > modules/MethodsRoot.ts 1`] = `
"import { type Simplify } from 'type-fest'
import type { InferResult } from '../../../../../../src/entrypoints/schema.js'
import type * as $$Utilities from '../../../../../../src/entrypoints/utilities-for-generated.js'
import type { Schema } from './Schema.js'
import type * as SelectionSet from './SelectionSets.js'

export interface MutationMethods<$Context extends $$Utilities.ClientContext> {
  $batch: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Mutation<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutput<
        $Context,
        InferResult.Mutation<$SelectionSet, Schema<$Context['scalars']>>
      >
    >
  >
  __typename: () => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        { __typename: 'Mutation' },
        '__typename'
      >
    >
  >

  id: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Mutation.id<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Mutation<{ id: $SelectionSet }, Schema<$Context['scalars']>>,
        'id'
      >
    >
  >

  idNonNull: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Mutation.idNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Mutation<{ idNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'idNonNull'
      >
    >
  >
}

export interface QueryMethods<$Context extends $$Utilities.ClientContext> {
  $batch: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutput<
        $Context,
        InferResult.Query<$SelectionSet, Schema<$Context['scalars']>>
      >
    >
  >
  __typename: () => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        { __typename: 'Query' },
        '__typename'
      >
    >
  >

  InputObjectNested: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.InputObjectNested<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ InputObjectNested: $SelectionSet }, Schema<$Context['scalars']>>,
        'InputObjectNested'
      >
    >
  >

  InputObjectNestedNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.InputObjectNestedNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ InputObjectNestedNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'InputObjectNestedNonNull'
      >
    >
  >
  /**
   * Query enum field documentation.
   */
  abcEnum: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.abcEnum<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ abcEnum: $SelectionSet }, Schema<$Context['scalars']>>,
        'abcEnum'
      >
    >
  >

  argInputObjectCircular: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.argInputObjectCircular<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ argInputObjectCircular: $SelectionSet }, Schema<$Context['scalars']>>,
        'argInputObjectCircular'
      >
    >
  >

  date: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.date<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ date: $SelectionSet }, Schema<$Context['scalars']>>,
        'date'
      >
    >
  >

  dateArg: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateArg<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateArg: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateArg'
      >
    >
  >

  dateArgInputObject: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateArgInputObject<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateArgInputObject: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateArgInputObject'
      >
    >
  >

  dateArgList: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateArgList<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateArgList: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateArgList'
      >
    >
  >

  dateArgNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateArgNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateArgNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateArgNonNull'
      >
    >
  >

  dateArgNonNullList: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateArgNonNullList<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateArgNonNullList: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateArgNonNullList'
      >
    >
  >

  dateArgNonNullListNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateArgNonNullListNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateArgNonNullListNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateArgNonNullListNonNull'
      >
    >
  >

  dateInterface1: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateInterface1<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateInterface1: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateInterface1'
      >
    >
  >

  dateList: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateList<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateList: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateList'
      >
    >
  >

  dateListList: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateListList<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateListList: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateListList'
      >
    >
  >

  dateListNonNull: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateListNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateListNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateListNonNull'
      >
    >
  >

  dateNonNull: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateNonNull'
      >
    >
  >

  dateObject1: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateObject1<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateObject1: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateObject1'
      >
    >
  >

  dateUnion: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.dateUnion<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ dateUnion: $SelectionSet }, Schema<$Context['scalars']>>,
        'dateUnion'
      >
    >
  >

  error: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.error<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ error: $SelectionSet }, Schema<$Context['scalars']>>,
        'error'
      >
    >
  >

  id: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.id<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ id: $SelectionSet }, Schema<$Context['scalars']>>,
        'id'
      >
    >
  >

  idNonNull: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.idNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ idNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'idNonNull'
      >
    >
  >

  interface: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.$interface<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ interface: $SelectionSet }, Schema<$Context['scalars']>>,
        'interface'
      >
    >
  >

  interfaceNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.interfaceNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ interfaceNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'interfaceNonNull'
      >
    >
  >

  interfaceWithArgs: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.interfaceWithArgs<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ interfaceWithArgs: $SelectionSet }, Schema<$Context['scalars']>>,
        'interfaceWithArgs'
      >
    >
  >

  listInt: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.listInt<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ listInt: $SelectionSet }, Schema<$Context['scalars']>>,
        'listInt'
      >
    >
  >

  listIntNonNull: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.listIntNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ listIntNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'listIntNonNull'
      >
    >
  >

  listListInt: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.listListInt<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ listListInt: $SelectionSet }, Schema<$Context['scalars']>>,
        'listListInt'
      >
    >
  >

  listListIntNonNull: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.listListIntNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ listListIntNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'listListIntNonNull'
      >
    >
  >

  lowerCaseUnion: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.lowerCaseUnion<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ lowerCaseUnion: $SelectionSet }, Schema<$Context['scalars']>>,
        'lowerCaseUnion'
      >
    >
  >

  object: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.$object<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ object: $SelectionSet }, Schema<$Context['scalars']>>,
        'object'
      >
    >
  >

  objectList: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.objectList<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ objectList: $SelectionSet }, Schema<$Context['scalars']>>,
        'objectList'
      >
    >
  >

  objectListNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.objectListNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ objectListNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'objectListNonNull'
      >
    >
  >

  objectNested: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.objectNested<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ objectNested: $SelectionSet }, Schema<$Context['scalars']>>,
        'objectNested'
      >
    >
  >

  objectNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.objectNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ objectNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'objectNonNull'
      >
    >
  >

  objectWithArgs: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.objectWithArgs<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ objectWithArgs: $SelectionSet }, Schema<$Context['scalars']>>,
        'objectWithArgs'
      >
    >
  >

  result: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.result<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ result: $SelectionSet }, Schema<$Context['scalars']>>,
        'result'
      >
    >
  >

  resultNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.resultNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ resultNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'resultNonNull'
      >
    >
  >

  string: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.$string<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ string: $SelectionSet }, Schema<$Context['scalars']>>,
        'string'
      >
    >
  >

  stringWithArgEnum: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.stringWithArgEnum<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ stringWithArgEnum: $SelectionSet }, Schema<$Context['scalars']>>,
        'stringWithArgEnum'
      >
    >
  >

  stringWithArgInputObject: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.stringWithArgInputObject<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ stringWithArgInputObject: $SelectionSet }, Schema<$Context['scalars']>>,
        'stringWithArgInputObject'
      >
    >
  >

  stringWithArgInputObjectRequired: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<
      $SelectionSet,
      SelectionSet.Query.stringWithArgInputObjectRequired<$Context['scalars']>
    >,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ stringWithArgInputObjectRequired: $SelectionSet }, Schema<$Context['scalars']>>,
        'stringWithArgInputObjectRequired'
      >
    >
  >
  /**
   * The given arguments are reflected back as a JSON string.
   */
  stringWithArgs: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.stringWithArgs<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ stringWithArgs: $SelectionSet }, Schema<$Context['scalars']>>,
        'stringWithArgs'
      >
    >
  >

  stringWithListArg: <$SelectionSet>(
    selectionSet?: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.stringWithListArg<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ stringWithListArg: $SelectionSet }, Schema<$Context['scalars']>>,
        'stringWithListArg'
      >
    >
  >

  stringWithListArgRequired: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.stringWithListArgRequired<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ stringWithListArgRequired: $SelectionSet }, Schema<$Context['scalars']>>,
        'stringWithListArgRequired'
      >
    >
  >

  stringWithRequiredArg: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.stringWithRequiredArg<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ stringWithRequiredArg: $SelectionSet }, Schema<$Context['scalars']>>,
        'stringWithRequiredArg'
      >
    >
  >

  unionFooBar: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.unionFooBar<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ unionFooBar: $SelectionSet }, Schema<$Context['scalars']>>,
        'unionFooBar'
      >
    >
  >

  unionFooBarNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.unionFooBarNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ unionFooBarNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'unionFooBarNonNull'
      >
    >
  >

  unionFooBarWithArgs: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.unionFooBarWithArgs<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ unionFooBarWithArgs: $SelectionSet }, Schema<$Context['scalars']>>,
        'unionFooBarWithArgs'
      >
    >
  >

  unionObject: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.unionObject<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ unionObject: $SelectionSet }, Schema<$Context['scalars']>>,
        'unionObject'
      >
    >
  >

  unionObjectNonNull: <$SelectionSet>(
    selectionSet: $$Utilities.Exact<$SelectionSet, SelectionSet.Query.unionObjectNonNull<$Context['scalars']>>,
  ) => Promise<
    Simplify<
      $$Utilities.HandleOutputGraffleRootField<
        $Context,
        InferResult.Query<{ unionObjectNonNull: $SelectionSet }, Schema<$Context['scalars']>>,
        'unionObjectNonNull'
      >
    >
  >
}

export interface BuilderMethodsRoot<$Context extends $$Utilities.ClientContext> {
  mutation: MutationMethods<$Context>
  query: QueryMethods<$Context>
}

export interface BuilderMethodsRootFn extends $$Utilities.TypeFunction.Fn {
  // @ts-expect-error parameter is Untyped.
  return: BuilderMethodsRoot<this['params']>
}
"
`;

exports[`kitchen-sink generated modules > modules/MethodsSelect.ts 1`] = `
"import type * as $Utilities from '../../../../../../src/entrypoints/utilities-for-generated.js'
import type * as $SelectionSets from './SelectionSets.js'

//
//
//
//
//
//
// ==================================================================================================
//                                      Select Methods Interface
// ==================================================================================================
//
//
//
//
//
//

export interface $MethodsSelect {
  Mutation: Mutation
  Query: Query
  Bar: Bar
  DateObject1: DateObject1
  DateObject2: DateObject2
  ErrorOne: ErrorOne
  ErrorTwo: ErrorTwo
  Foo: Foo
  Object1: Object1
  Object1ImplementingInterface: Object1ImplementingInterface
  Object2ImplementingInterface: Object2ImplementingInterface
  ObjectNested: ObjectNested
  ObjectUnion: ObjectUnion
  lowerCaseObject: lowerCaseObject
  lowerCaseObject2: lowerCaseObject2
  DateUnion: DateUnion
  FooBarUnion: FooBarUnion
  Result: Result
  lowerCaseUnion: lowerCaseUnion
  DateInterface1: DateInterface1
  Error: Error
  Interface: Interface
}

//
//
//
//
//
//
// ==================================================================================================
//                                                Root
// ==================================================================================================
//
//
//
//
//
//

export interface Mutation {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Mutation>): $SelectionSet
}

export interface Query {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Query>): $SelectionSet
}

//
//
//
//
//
//
// ==================================================================================================
//                                            OutputObject
// ==================================================================================================
//
//
//
//
//
//

export interface Bar {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Bar>): $SelectionSet
}

export interface DateObject1 {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.DateObject1>): $SelectionSet
}

export interface DateObject2 {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.DateObject2>): $SelectionSet
}

export interface ErrorOne {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.ErrorOne>): $SelectionSet
}

export interface ErrorTwo {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.ErrorTwo>): $SelectionSet
}

export interface Foo {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Foo>): $SelectionSet
}

export interface Object1 {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Object1>): $SelectionSet
}

export interface Object1ImplementingInterface {
  <$SelectionSet>(
    selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Object1ImplementingInterface>,
  ): $SelectionSet
}

export interface Object2ImplementingInterface {
  <$SelectionSet>(
    selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Object2ImplementingInterface>,
  ): $SelectionSet
}

export interface ObjectNested {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.ObjectNested>): $SelectionSet
}

export interface ObjectUnion {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.ObjectUnion>): $SelectionSet
}

export interface lowerCaseObject {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.lowerCaseObject>): $SelectionSet
}

export interface lowerCaseObject2 {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.lowerCaseObject2>): $SelectionSet
}

//
//
//
//
//
//
// ==================================================================================================
//                                               Union
// ==================================================================================================
//
//
//
//
//
//

export interface DateUnion {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.DateUnion>): $SelectionSet
}

export interface FooBarUnion {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.FooBarUnion>): $SelectionSet
}

export interface Result {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Result>): $SelectionSet
}

export interface lowerCaseUnion {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.lowerCaseUnion>): $SelectionSet
}

//
//
//
//
//
//
// ==================================================================================================
//                                             Interface
// ==================================================================================================
//
//
//
//
//
//

export interface DateInterface1 {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.DateInterface1>): $SelectionSet
}

export interface Error {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Error>): $SelectionSet
}

export interface Interface {
  <$SelectionSet>(selectionSet: $Utilities.Exact<$SelectionSet, $SelectionSets.Interface>): $SelectionSet
}
"
`;

exports[`kitchen-sink generated modules > modules/Scalar.ts 1`] = `
"import type * as $$Utilities from '../../../../../../src/entrypoints/utilities-for-generated.js'

export * from '../../../../../../src/types/Schema/StandardTypes/scalar.js'

//
//
//
//
// CUSTOM SCALAR TYPE
// DATE
// --------------------------------------------------------------------------------------------------
//                                                Date
// --------------------------------------------------------------------------------------------------
//
//

export type Date = $$Utilities.Schema.Scalar.ScalarCodecless<'Date'>
"
`;

exports[`kitchen-sink generated modules > modules/Schema.ts 1`] = `
"import type { Schema as $ } from '../../../../../../src/entrypoints/utilities-for-generated.js'
import type * as $$Utilities from '../../../../../../src/entrypoints/utilities-for-generated.js'
import type * as Data from './Data.js'
import type * as MethodsRoot from './MethodsRoot.js'
import type * as $Scalar from './Scalar.js'

export namespace Schema {
  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                                Root
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                              Mutation
  // --------------------------------------------------------------------------------------------------
  //

  export interface Mutation extends $.OutputObject {
    name: 'Mutation'
    fields: {
      __typename: Mutation.__typename
      id: Mutation.id
      idNonNull: Mutation.idNonNull
    }
  }

  export namespace Mutation {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'Mutation'
      }
    }

    export interface id extends $.OutputField {
      name: 'id'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    export interface idNonNull extends $.OutputField {
      name: 'idNonNull'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$ID
    }
  }

  //                                               Query
  // --------------------------------------------------------------------------------------------------
  //

  export interface Query extends $.OutputObject {
    name: 'Query'
    fields: {
      __typename: Query.__typename
      InputObjectNested: Query.InputObjectNested
      InputObjectNestedNonNull: Query.InputObjectNestedNonNull
      abcEnum: Query.abcEnum
      argInputObjectCircular: Query.argInputObjectCircular
      date: Query.date
      dateArg: Query.dateArg
      dateArgInputObject: Query.dateArgInputObject
      dateArgList: Query.dateArgList
      dateArgNonNull: Query.dateArgNonNull
      dateArgNonNullList: Query.dateArgNonNullList
      dateArgNonNullListNonNull: Query.dateArgNonNullListNonNull
      dateInterface1: Query.dateInterface1
      dateList: Query.dateList
      dateListList: Query.dateListList
      dateListNonNull: Query.dateListNonNull
      dateNonNull: Query.dateNonNull
      dateObject1: Query.dateObject1
      dateUnion: Query.dateUnion
      error: Query.error
      id: Query.id
      idNonNull: Query.idNonNull
      interface: Query.$interface
      interfaceNonNull: Query.interfaceNonNull
      interfaceWithArgs: Query.interfaceWithArgs
      listInt: Query.listInt
      listIntNonNull: Query.listIntNonNull
      listListInt: Query.listListInt
      listListIntNonNull: Query.listListIntNonNull
      lowerCaseUnion: Query.lowerCaseUnion
      object: Query.$object
      objectList: Query.objectList
      objectListNonNull: Query.objectListNonNull
      objectNested: Query.objectNested
      objectNonNull: Query.objectNonNull
      objectWithArgs: Query.objectWithArgs
      result: Query.result
      resultNonNull: Query.resultNonNull
      string: Query.$string
      stringWithArgEnum: Query.stringWithArgEnum
      stringWithArgInputObject: Query.stringWithArgInputObject
      stringWithArgInputObjectRequired: Query.stringWithArgInputObjectRequired
      stringWithArgs: Query.stringWithArgs
      stringWithListArg: Query.stringWithListArg
      stringWithListArgRequired: Query.stringWithListArgRequired
      stringWithRequiredArg: Query.stringWithRequiredArg
      unionFooBar: Query.unionFooBar
      unionFooBarNonNull: Query.unionFooBarNonNull
      unionFooBarWithArgs: Query.unionFooBarWithArgs
      unionObject: Query.unionObject
      unionObjectNonNull: Query.unionObjectNonNull
    }
  }

  export namespace Query {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'Query'
      }
    }

    export interface InputObjectNested extends $.OutputField {
      name: 'InputObjectNested'
      arguments: {
        input: {
          kind: 'InputField'
          name: 'input'
          inlineType: [0]
          namedType: $$NamedTypes.$$InputObjectNested
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    export interface InputObjectNestedNonNull extends $.OutputField {
      name: 'InputObjectNestedNonNull'
      arguments: {
        input: {
          kind: 'InputField'
          name: 'input'
          inlineType: [1]
          namedType: $$NamedTypes.$$InputObjectNestedNonNull
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    /**
     * Query enum field documentation.
     */
    export interface abcEnum extends $.OutputField {
      name: 'abcEnum'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ABCEnum
    }

    export interface argInputObjectCircular extends $.OutputField {
      name: 'argInputObjectCircular'
      arguments: {
        input: {
          kind: 'InputField'
          name: 'input'
          inlineType: [0]
          namedType: $$NamedTypes.$$InputObjectCircular
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface date extends $.OutputField {
      name: 'date'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateArg extends $.OutputField {
      name: 'dateArg'
      arguments: {
        date: {
          kind: 'InputField'
          name: 'date'
          inlineType: [0]
          namedType: $$NamedTypes.$$Date
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateArgInputObject extends $.OutputField {
      name: 'dateArgInputObject'
      arguments: {
        input: {
          kind: 'InputField'
          name: 'input'
          inlineType: [0]
          namedType: $$NamedTypes.$$InputObject
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateArgList extends $.OutputField {
      name: 'dateArgList'
      arguments: {
        date: {
          kind: 'InputField'
          name: 'date'
          inlineType: [0, [1]]
          namedType: $$NamedTypes.$$Date
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateArgNonNull extends $.OutputField {
      name: 'dateArgNonNull'
      arguments: {
        date: {
          kind: 'InputField'
          name: 'date'
          inlineType: [1]
          namedType: $$NamedTypes.$$Date
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateArgNonNullList extends $.OutputField {
      name: 'dateArgNonNullList'
      arguments: {
        date: {
          kind: 'InputField'
          name: 'date'
          inlineType: [1, [0]]
          namedType: $$NamedTypes.$$Date
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateArgNonNullListNonNull extends $.OutputField {
      name: 'dateArgNonNullListNonNull'
      arguments: {
        date: {
          kind: 'InputField'
          name: 'date'
          inlineType: [1, [1]]
          namedType: $$NamedTypes.$$Date
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateInterface1 extends $.OutputField {
      name: 'dateInterface1'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$DateInterface1
    }

    export interface dateList extends $.OutputField {
      name: 'dateList'
      arguments: {}
      inlineType: [0, [1]]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateListList extends $.OutputField {
      name: 'dateListList'
      arguments: {}
      inlineType: [0, [1, [1]]]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateListNonNull extends $.OutputField {
      name: 'dateListNonNull'
      arguments: {}
      inlineType: [1, [1]]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateNonNull extends $.OutputField {
      name: 'dateNonNull'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateObject1 extends $.OutputField {
      name: 'dateObject1'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$DateObject1
    }

    export interface dateUnion extends $.OutputField {
      name: 'dateUnion'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$DateUnion
    }

    export interface error extends $.OutputField {
      name: 'error'
      arguments: {
        case: {
          kind: 'InputField'
          name: 'case'
          inlineType: [0]
          namedType: $$NamedTypes.$$String
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface id extends $.OutputField {
      name: 'id'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    export interface idNonNull extends $.OutputField {
      name: 'idNonNull'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$ID
    }

    export interface $interface extends $.OutputField {
      name: 'interface'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Interface
    }

    export interface interfaceNonNull extends $.OutputField {
      name: 'interfaceNonNull'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$Interface
    }

    export interface interfaceWithArgs extends $.OutputField {
      name: 'interfaceWithArgs'
      arguments: {
        id: {
          kind: 'InputField'
          name: 'id'
          inlineType: [1]
          namedType: $$NamedTypes.$$ID
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Interface
    }

    export interface listInt extends $.OutputField {
      name: 'listInt'
      arguments: {}
      inlineType: [0, [0]]
      namedType: $$NamedTypes.$$Int
    }

    export interface listIntNonNull extends $.OutputField {
      name: 'listIntNonNull'
      arguments: {}
      inlineType: [1, [1]]
      namedType: $$NamedTypes.$$Int
    }

    export interface listListInt extends $.OutputField {
      name: 'listListInt'
      arguments: {}
      inlineType: [0, [0, [0]]]
      namedType: $$NamedTypes.$$Int
    }

    export interface listListIntNonNull extends $.OutputField {
      name: 'listListIntNonNull'
      arguments: {}
      inlineType: [1, [1, [1]]]
      namedType: $$NamedTypes.$$Int
    }

    export interface lowerCaseUnion extends $.OutputField {
      name: 'lowerCaseUnion'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$lowerCaseUnion
    }

    export interface $object extends $.OutputField {
      name: 'object'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Object1
    }

    export interface objectList extends $.OutputField {
      name: 'objectList'
      arguments: {}
      inlineType: [0, [1]]
      namedType: $$NamedTypes.$$Object1
    }

    export interface objectListNonNull extends $.OutputField {
      name: 'objectListNonNull'
      arguments: {}
      inlineType: [1, [1]]
      namedType: $$NamedTypes.$$Object1
    }

    export interface objectNested extends $.OutputField {
      name: 'objectNested'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ObjectNested
    }

    export interface objectNonNull extends $.OutputField {
      name: 'objectNonNull'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$Object1
    }

    export interface objectWithArgs extends $.OutputField {
      name: 'objectWithArgs'
      arguments: {
        boolean: {
          kind: 'InputField'
          name: 'boolean'
          inlineType: [0]
          namedType: $$NamedTypes.$$Boolean
        }
        float: {
          kind: 'InputField'
          name: 'float'
          inlineType: [0]
          namedType: $$NamedTypes.$$Float
        }
        id: {
          kind: 'InputField'
          name: 'id'
          inlineType: [0]
          namedType: $$NamedTypes.$$ID
        }
        int: {
          kind: 'InputField'
          name: 'int'
          inlineType: [0]
          namedType: $$NamedTypes.$$Int
        }
        string: {
          kind: 'InputField'
          name: 'string'
          inlineType: [0]
          namedType: $$NamedTypes.$$String
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Object1
    }

    export interface result extends $.OutputField {
      name: 'result'
      arguments: {
        case: {
          kind: 'InputField'
          name: 'case'
          inlineType: [1]
          namedType: $$NamedTypes.$$Case
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$Result
    }

    export interface resultNonNull extends $.OutputField {
      name: 'resultNonNull'
      arguments: {
        case: {
          kind: 'InputField'
          name: 'case'
          inlineType: [0]
          namedType: $$NamedTypes.$$Case
        }
      }
      inlineType: [1]
      namedType: $$NamedTypes.$$Result
    }

    export interface $string extends $.OutputField {
      name: 'string'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface stringWithArgEnum extends $.OutputField {
      name: 'stringWithArgEnum'
      arguments: {
        ABCEnum: {
          kind: 'InputField'
          name: 'ABCEnum'
          inlineType: [0]
          namedType: $$NamedTypes.$$ABCEnum
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface stringWithArgInputObject extends $.OutputField {
      name: 'stringWithArgInputObject'
      arguments: {
        input: {
          kind: 'InputField'
          name: 'input'
          inlineType: [0]
          namedType: $$NamedTypes.$$InputObject
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface stringWithArgInputObjectRequired extends $.OutputField {
      name: 'stringWithArgInputObjectRequired'
      arguments: {
        input: {
          kind: 'InputField'
          name: 'input'
          inlineType: [1]
          namedType: $$NamedTypes.$$InputObject
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    /**
     * The given arguments are reflected back as a JSON string.
     */
    export interface stringWithArgs extends $.OutputField {
      name: 'stringWithArgs'
      arguments: {
        boolean: {
          kind: 'InputField'
          name: 'boolean'
          inlineType: [0]
          namedType: $$NamedTypes.$$Boolean
        }
        float: {
          kind: 'InputField'
          name: 'float'
          inlineType: [0]
          namedType: $$NamedTypes.$$Float
        }
        id: {
          kind: 'InputField'
          name: 'id'
          inlineType: [0]
          namedType: $$NamedTypes.$$ID
        }
        /**
         * @deprecated Example of argument deprecation reason here.
         */
        int: {
          kind: 'InputField'
          name: 'int'
          inlineType: [0]
          namedType: $$NamedTypes.$$Int
        }
        /**
         * Example of some argument documentation here.
         */
        string: {
          kind: 'InputField'
          name: 'string'
          inlineType: [0]
          namedType: $$NamedTypes.$$String
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface stringWithListArg extends $.OutputField {
      name: 'stringWithListArg'
      arguments: {
        ints: {
          kind: 'InputField'
          name: 'ints'
          inlineType: [0, [0]]
          namedType: $$NamedTypes.$$Int
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface stringWithListArgRequired extends $.OutputField {
      name: 'stringWithListArgRequired'
      arguments: {
        ints: {
          kind: 'InputField'
          name: 'ints'
          inlineType: [1, [1]]
          namedType: $$NamedTypes.$$Int
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface stringWithRequiredArg extends $.OutputField {
      name: 'stringWithRequiredArg'
      arguments: {
        string: {
          kind: 'InputField'
          name: 'string'
          inlineType: [1]
          namedType: $$NamedTypes.$$String
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }

    export interface unionFooBar extends $.OutputField {
      name: 'unionFooBar'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$FooBarUnion
    }

    export interface unionFooBarNonNull extends $.OutputField {
      name: 'unionFooBarNonNull'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$FooBarUnion
    }

    export interface unionFooBarWithArgs extends $.OutputField {
      name: 'unionFooBarWithArgs'
      arguments: {
        id: {
          kind: 'InputField'
          name: 'id'
          inlineType: [0]
          namedType: $$NamedTypes.$$ID
        }
      }
      inlineType: [0]
      namedType: $$NamedTypes.$$FooBarUnion
    }

    export interface unionObject extends $.OutputField {
      name: 'unionObject'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ObjectUnion
    }

    export interface unionObjectNonNull extends $.OutputField {
      name: 'unionObjectNonNull'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$ObjectUnion
    }
  }

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                            OutputObject
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                                Bar
  // --------------------------------------------------------------------------------------------------
  //

  export interface Bar extends $.OutputObject {
    name: 'Bar'
    fields: {
      __typename: Bar.__typename
      int: Bar.int
    }
  }

  export namespace Bar {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'Bar'
      }
    }

    export interface int extends $.OutputField {
      name: 'int'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Int
    }
  }

  //                                            DateObject1
  // --------------------------------------------------------------------------------------------------
  //

  export interface DateObject1 extends $.OutputObject {
    name: 'DateObject1'
    fields: {
      __typename: DateObject1.__typename
      date1: DateObject1.date1
    }
  }

  export namespace DateObject1 {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'DateObject1'
      }
    }

    export interface date1 extends $.OutputField {
      name: 'date1'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }
  }

  //                                            DateObject2
  // --------------------------------------------------------------------------------------------------
  //

  export interface DateObject2 extends $.OutputObject {
    name: 'DateObject2'
    fields: {
      __typename: DateObject2.__typename
      date2: DateObject2.date2
    }
  }

  export namespace DateObject2 {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'DateObject2'
      }
    }

    export interface date2 extends $.OutputField {
      name: 'date2'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }
  }

  //                                              ErrorOne
  // --------------------------------------------------------------------------------------------------
  //

  export interface ErrorOne extends $.OutputObject {
    name: 'ErrorOne'
    fields: {
      __typename: ErrorOne.__typename
      infoId: ErrorOne.infoId
      message: ErrorOne.message
    }
  }

  export namespace ErrorOne {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'ErrorOne'
      }
    }

    export interface infoId extends $.OutputField {
      name: 'infoId'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    export interface message extends $.OutputField {
      name: 'message'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$String
    }
  }

  //                                              ErrorTwo
  // --------------------------------------------------------------------------------------------------
  //

  export interface ErrorTwo extends $.OutputObject {
    name: 'ErrorTwo'
    fields: {
      __typename: ErrorTwo.__typename
      infoInt: ErrorTwo.infoInt
      message: ErrorTwo.message
    }
  }

  export namespace ErrorTwo {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'ErrorTwo'
      }
    }

    export interface infoInt extends $.OutputField {
      name: 'infoInt'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Int
    }

    export interface message extends $.OutputField {
      name: 'message'
      arguments: {}
      inlineType: [1]
      namedType: $$NamedTypes.$$String
    }
  }

  //                                                Foo
  // --------------------------------------------------------------------------------------------------
  //

  /**
   * Object documentation.
   */
  export interface Foo extends $.OutputObject {
    name: 'Foo'
    fields: {
      __typename: Foo.__typename
      id: Foo.id
    }
  }

  export namespace Foo {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'Foo'
      }
    }

    /**
     * Field documentation.
     *
     * @deprecated Field a is deprecated.
     */
    export interface id extends $.OutputField {
      name: 'id'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }
  }

  //                                              Object1
  // --------------------------------------------------------------------------------------------------
  //

  export interface Object1 extends $.OutputObject {
    name: 'Object1'
    fields: {
      __typename: Object1.__typename
      ABCEnum: Object1.ABCEnum
      boolean: Object1.$boolean
      float: Object1.float
      id: Object1.id
      int: Object1.int
      string: Object1.$string
    }
  }

  export namespace Object1 {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'Object1'
      }
    }

    export interface ABCEnum extends $.OutputField {
      name: 'ABCEnum'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ABCEnum
    }

    export interface $boolean extends $.OutputField {
      name: 'boolean'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Boolean
    }

    export interface float extends $.OutputField {
      name: 'float'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Float
    }

    export interface id extends $.OutputField {
      name: 'id'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    export interface int extends $.OutputField {
      name: 'int'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Int
    }

    export interface $string extends $.OutputField {
      name: 'string'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$String
    }
  }

  //                                    Object1ImplementingInterface
  // --------------------------------------------------------------------------------------------------
  //

  export interface Object1ImplementingInterface extends $.OutputObject {
    name: 'Object1ImplementingInterface'
    fields: {
      __typename: Object1ImplementingInterface.__typename
      id: Object1ImplementingInterface.id
      int: Object1ImplementingInterface.int
    }
  }

  export namespace Object1ImplementingInterface {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'Object1ImplementingInterface'
      }
    }

    export interface id extends $.OutputField {
      name: 'id'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    export interface int extends $.OutputField {
      name: 'int'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Int
    }
  }

  //                                    Object2ImplementingInterface
  // --------------------------------------------------------------------------------------------------
  //

  export interface Object2ImplementingInterface extends $.OutputObject {
    name: 'Object2ImplementingInterface'
    fields: {
      __typename: Object2ImplementingInterface.__typename
      boolean: Object2ImplementingInterface.$boolean
      id: Object2ImplementingInterface.id
    }
  }

  export namespace Object2ImplementingInterface {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'Object2ImplementingInterface'
      }
    }

    export interface $boolean extends $.OutputField {
      name: 'boolean'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Boolean
    }

    export interface id extends $.OutputField {
      name: 'id'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }
  }

  //                                            ObjectNested
  // --------------------------------------------------------------------------------------------------
  //

  export interface ObjectNested extends $.OutputObject {
    name: 'ObjectNested'
    fields: {
      __typename: ObjectNested.__typename
      id: ObjectNested.id
      object: ObjectNested.$object
    }
  }

  export namespace ObjectNested {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'ObjectNested'
      }
    }

    export interface id extends $.OutputField {
      name: 'id'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    export interface $object extends $.OutputField {
      name: 'object'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Object1
    }
  }

  //                                            ObjectUnion
  // --------------------------------------------------------------------------------------------------
  //

  export interface ObjectUnion extends $.OutputObject {
    name: 'ObjectUnion'
    fields: {
      __typename: ObjectUnion.__typename
      fooBarUnion: ObjectUnion.fooBarUnion
    }
  }

  export namespace ObjectUnion {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'ObjectUnion'
      }
    }

    export interface fooBarUnion extends $.OutputField {
      name: 'fooBarUnion'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$FooBarUnion
    }
  }

  //                                          lowerCaseObject
  // --------------------------------------------------------------------------------------------------
  //

  export interface lowerCaseObject extends $.OutputObject {
    name: 'lowerCaseObject'
    fields: {
      __typename: lowerCaseObject.__typename
      id: lowerCaseObject.id
    }
  }

  export namespace lowerCaseObject {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'lowerCaseObject'
      }
    }

    export interface id extends $.OutputField {
      name: 'id'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }
  }

  //                                          lowerCaseObject2
  // --------------------------------------------------------------------------------------------------
  //

  export interface lowerCaseObject2 extends $.OutputObject {
    name: 'lowerCaseObject2'
    fields: {
      __typename: lowerCaseObject2.__typename
      int: lowerCaseObject2.int
    }
  }

  export namespace lowerCaseObject2 {
    export interface __typename extends $.OutputField {
      name: '__typename'
      arguments: {}
      inlineType: [1]
      namedType: {
        kind: '__typename'
        value: 'lowerCaseObject2'
      }
    }

    export interface int extends $.OutputField {
      name: 'int'
      arguments: {}
      inlineType: [0]
      namedType: $$NamedTypes.$$Int
    }
  }

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                            InputObject
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                            InputObject
  // --------------------------------------------------------------------------------------------------
  //

  export interface InputObject extends $.InputObject {
    name: 'InputObject'
    isAllFieldsNullable: true
    fields: {
      date: InputObject.date
      dateRequired: InputObject.dateRequired
      id: InputObject.id
      idRequired: InputObject.idRequired
    }
  }

  export namespace InputObject {
    export interface date extends $.InputField {
      name: 'date'
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }

    export interface dateRequired extends $.InputField {
      name: 'dateRequired'
      inlineType: [1]
      namedType: $$NamedTypes.$$Date
    }

    export interface id extends $.InputField {
      name: 'id'
      inlineType: [0]
      namedType: $$NamedTypes.$$ID
    }

    export interface idRequired extends $.InputField {
      name: 'idRequired'
      inlineType: [1]
      namedType: $$NamedTypes.$$ID
    }
  }

  //                                        InputObjectCircular
  // --------------------------------------------------------------------------------------------------
  //

  export interface InputObjectCircular extends $.InputObject {
    name: 'InputObjectCircular'
    isAllFieldsNullable: true
    fields: {
      circular: InputObjectCircular.circular
      date: InputObjectCircular.date
    }
  }

  export namespace InputObjectCircular {
    export interface circular extends $.InputField {
      name: 'circular'
      inlineType: [0]
      namedType: $$NamedTypes.$$InputObjectCircular
    }

    export interface date extends $.InputField {
      name: 'date'
      inlineType: [0]
      namedType: $$NamedTypes.$$Date
    }
  }

  //                                         InputObjectNested
  // --------------------------------------------------------------------------------------------------
  //

  export interface InputObjectNested extends $.InputObject {
    name: 'InputObjectNested'
    isAllFieldsNullable: true
    fields: {
      InputObject: InputObjectNested.InputObject
    }
  }

  export namespace InputObjectNested {
    export interface InputObject extends $.InputField {
      name: 'InputObject'
      inlineType: [0]
      namedType: $$NamedTypes.$$InputObject
    }
  }

  //                                      InputObjectNestedNonNull
  // --------------------------------------------------------------------------------------------------
  //

  export interface InputObjectNestedNonNull extends $.InputObject {
    name: 'InputObjectNestedNonNull'
    isAllFieldsNullable: false
    fields: {
      InputObject: InputObjectNestedNonNull.InputObject
    }
  }

  export namespace InputObjectNestedNonNull {
    export interface InputObject extends $.InputField {
      name: 'InputObject'
      inlineType: [1]
      namedType: $$NamedTypes.$$InputObject
    }
  }

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                             Interface
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                           DateInterface1
  // --------------------------------------------------------------------------------------------------
  //

  export interface DateInterface1 extends $.Interface {
    name: 'DateInterface1'
    implementors: [DateObject1]
    implementorsUnion: DateObject1
    implementorsIndex: {
      DateObject1: DateObject1
    }
  }

  //                                               Error
  // --------------------------------------------------------------------------------------------------
  //

  export interface Error extends $.Interface {
    name: 'Error'
    implementors: [ErrorOne, ErrorTwo]
    implementorsUnion:
      | ErrorOne
      | ErrorTwo
    implementorsIndex: {
      ErrorOne: ErrorOne
      ErrorTwo: ErrorTwo
    }
  }

  //                                             Interface
  // --------------------------------------------------------------------------------------------------
  //

  export interface Interface extends $.Interface {
    name: 'Interface'
    implementors: [Object1ImplementingInterface, Object2ImplementingInterface]
    implementorsUnion:
      | Object1ImplementingInterface
      | Object2ImplementingInterface
    implementorsIndex: {
      Object1ImplementingInterface: Object1ImplementingInterface
      Object2ImplementingInterface: Object2ImplementingInterface
    }
  }

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                               Union
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                             DateUnion
  // --------------------------------------------------------------------------------------------------
  //

  export interface DateUnion extends $.Union {
    name: 'DateUnion'
    members: [DateObject1, DateObject2]
    membersUnion:
      | DateObject1
      | DateObject2
    membersIndex: {
      DateObject1: DateObject1
      DateObject2: DateObject2
    }
  }

  //                                            FooBarUnion
  // --------------------------------------------------------------------------------------------------
  //

  /**
   * Union documentation.
   */
  export interface FooBarUnion extends $.Union {
    name: 'FooBarUnion'
    members: [Bar, Foo]
    membersUnion:
      | Bar
      | Foo
    membersIndex: {
      Bar: Bar
      Foo: Foo
    }
  }

  //                                               Result
  // --------------------------------------------------------------------------------------------------
  //

  export interface Result extends $.Union {
    name: 'Result'
    members: [ErrorOne, ErrorTwo, Object1]
    membersUnion:
      | ErrorOne
      | ErrorTwo
      | Object1
    membersIndex: {
      ErrorOne: ErrorOne
      ErrorTwo: ErrorTwo
      Object1: Object1
    }
  }

  //                                           lowerCaseUnion
  // --------------------------------------------------------------------------------------------------
  //

  export interface lowerCaseUnion extends $.Union {
    name: 'lowerCaseUnion'
    members: [lowerCaseObject, lowerCaseObject2]
    membersUnion:
      | lowerCaseObject
      | lowerCaseObject2
    membersIndex: {
      lowerCaseObject: lowerCaseObject
      lowerCaseObject2: lowerCaseObject2
    }
  }

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                                Enum
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                              ABCEnum
  // --------------------------------------------------------------------------------------------------
  //

  /**
   * Enum documentation.
   *
   * Members
   * "A" - (DEPRECATED: Enum value A is deprecated.)
   * "B" - Enum B member documentation.
   * "C" - (DEPRECATED: Enum value C is deprecated.)
   */
  export interface ABCEnum extends $.Enum {
    name: 'ABCEnum'
    members: ['A', 'B', 'C']
    membersUnion:
      | 'A'
      | 'B'
      | 'C'
  }

  //                                                Case
  // --------------------------------------------------------------------------------------------------
  //

  export interface Case extends $.Enum {
    name: 'Case'
    members: ['ErrorOne', 'ErrorTwo', 'Object1']
    membersUnion:
      | 'ErrorOne'
      | 'ErrorTwo'
      | 'Object1'
  }

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                            ScalarCustom
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                                Date
  // --------------------------------------------------------------------------------------------------
  //

  export type Date = $Scalar.Date

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                           ScalarStandard
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                              Boolean
  // --------------------------------------------------------------------------------------------------
  //

  export type Boolean = $.StandardTypes.Boolean

  //                                               Float
  // --------------------------------------------------------------------------------------------------
  //

  export type Float = $.StandardTypes.Float

  //                                                 ID
  // --------------------------------------------------------------------------------------------------
  //

  export type ID = $.StandardTypes.ID

  //                                                Int
  // --------------------------------------------------------------------------------------------------
  //

  export type Int = $.StandardTypes.Int

  //                                               String
  // --------------------------------------------------------------------------------------------------
  //

  export type String = $.StandardTypes.String

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                         Named Types Index
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  /**
   * [1] These definitions serve to allow field selection interfaces to extend their respective object type without
   *     name clashing between the field name and the object name.
   *
   *     For example imagine \`Query.Foo\` field with type also called \`Foo\`. Our generated interfaces for each field
   *     would end up with an error of \`export interface Foo extends Foo ...\`
   */

  namespace $$NamedTypes {
    export type $$Mutation = Mutation
    export type $$Query = Query
    export type $$Bar = Bar
    export type $$DateObject1 = DateObject1
    export type $$DateObject2 = DateObject2
    export type $$ErrorOne = ErrorOne
    export type $$ErrorTwo = ErrorTwo
    export type $$Foo = Foo
    export type $$Object1 = Object1
    export type $$Object1ImplementingInterface = Object1ImplementingInterface
    export type $$Object2ImplementingInterface = Object2ImplementingInterface
    export type $$ObjectNested = ObjectNested
    export type $$ObjectUnion = ObjectUnion
    export type $$lowerCaseObject = lowerCaseObject
    export type $$lowerCaseObject2 = lowerCaseObject2
    export type $$InputObject = InputObject
    export type $$InputObjectCircular = InputObjectCircular
    export type $$InputObjectNested = InputObjectNested
    export type $$InputObjectNestedNonNull = InputObjectNestedNonNull
    export type $$DateInterface1 = DateInterface1
    export type $$Error = Error
    export type $$Interface = Interface
    export type $$DateUnion = DateUnion
    export type $$FooBarUnion = FooBarUnion
    export type $$Result = Result
    export type $$lowerCaseUnion = lowerCaseUnion
    export type $$ABCEnum = ABCEnum
    export type $$Case = Case
    export type $$Date = Date
    export type $$Boolean = Boolean
    export type $$Float = Float
    export type $$ID = ID
    export type $$Int = Int
    export type $$String = String
  }
}

//
//
//
//
//
//
// ==================================================================================================
//                                               Schema
// ==================================================================================================
//
//
//
//
//
//

export interface Schema<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty>
  extends $
{
  name: Data.Name
  RootTypesPresent: ['Mutation', 'Query']
  RootUnion: Schema.Mutation | Schema.Query
  Root: {
    Query: Schema.Query
    Mutation: Schema.Mutation
    Subscription: null
  }
  allTypes: {
    Mutation: Schema.Mutation
    Query: Schema.Query
    ABCEnum: Schema.ABCEnum
    Case: Schema.Case
    Bar: Schema.Bar
    DateObject1: Schema.DateObject1
    DateObject2: Schema.DateObject2
    ErrorOne: Schema.ErrorOne
    ErrorTwo: Schema.ErrorTwo
    Foo: Schema.Foo
    Object1: Schema.Object1
    Object1ImplementingInterface: Schema.Object1ImplementingInterface
    Object2ImplementingInterface: Schema.Object2ImplementingInterface
    ObjectNested: Schema.ObjectNested
    ObjectUnion: Schema.ObjectUnion
    lowerCaseObject: Schema.lowerCaseObject
    lowerCaseObject2: Schema.lowerCaseObject2
    DateUnion: Schema.DateUnion
    FooBarUnion: Schema.FooBarUnion
    Result: Schema.Result
    lowerCaseUnion: Schema.lowerCaseUnion
    DateInterface1: Schema.DateInterface1
    Error: Schema.Error
    Interface: Schema.Interface
  }
  objects: {
    Bar: Schema.Bar
    DateObject1: Schema.DateObject1
    DateObject2: Schema.DateObject2
    ErrorOne: Schema.ErrorOne
    ErrorTwo: Schema.ErrorTwo
    Foo: Schema.Foo
    Object1: Schema.Object1
    Object1ImplementingInterface: Schema.Object1ImplementingInterface
    Object2ImplementingInterface: Schema.Object2ImplementingInterface
    ObjectNested: Schema.ObjectNested
    ObjectUnion: Schema.ObjectUnion
    lowerCaseObject: Schema.lowerCaseObject
    lowerCaseObject2: Schema.lowerCaseObject2
  }
  unions: {
    DateUnion: Schema.DateUnion
    FooBarUnion: Schema.FooBarUnion
    Result: Schema.Result
    lowerCaseUnion: Schema.lowerCaseUnion
  }
  interfaces: {
    DateInterface1: Schema.DateInterface1
    Error: Schema.Error
    Interface: Schema.Interface
  }
  scalars: $Scalars
  extensions: $$Utilities.GlobalRegistry.TypeExtensions
}
"
`;

exports[`kitchen-sink generated modules > modules/SchemaDrivenDataMap.ts 1`] = `
"import type * as $$Utilities from '../../../../../../src/entrypoints/utilities-for-generated.js'
import * as $Scalar from './Scalar.js'
//
//
//
//
//
//
// ==================================================================================================
//                                           ScalarStandard
// ==================================================================================================
//
//
//
//
//
//

const Boolean = $Scalar.Boolean

const Float = $Scalar.Float

const ID = $Scalar.ID

const Int = $Scalar.Int

const String = $Scalar.String

//
//
//
//
//
//
// ==================================================================================================
//                                            ScalarCustom
// ==================================================================================================
//
//
//
//
//
//

const Date = 'Date'

//
//
//
//
//
//
// ==================================================================================================
//                                                Enum
// ==================================================================================================
//
//
//
//
//
//

const ABCEnum: $$Utilities.SchemaDrivenDataMap.Enum = {
  k: 'enum',
  n: 'ABCEnum',
}

const Case: $$Utilities.SchemaDrivenDataMap.Enum = {
  k: 'enum',
  n: 'Case',
}

//
//
//
//
//
//
// ==================================================================================================
//                                            InputObject
// ==================================================================================================
//
//
//
//
//
//

const InputObject: $$Utilities.SchemaDrivenDataMap.InputObject = {
  n: 'InputObject',
  fcs: ['date', 'dateRequired'],
  f: {
    date: {
      nt: Date,
    },
    dateRequired: {
      nt: Date,
    },
    id: {},
    idRequired: {},
  },
}

const InputObjectCircular: $$Utilities.SchemaDrivenDataMap.InputObject = {
  n: 'InputObjectCircular',
  fcs: ['circular', 'date'],
  f: {
    circular: {
      // nt: InputObjectCircular, <-- Assigned later to avoid potential circular dependency.
    },
    date: {
      nt: Date,
    },
  },
}

const InputObjectNested: $$Utilities.SchemaDrivenDataMap.InputObject = {
  n: 'InputObjectNested',
  fcs: ['InputObject'],
  f: {
    InputObject: {
      // nt: InputObject, <-- Assigned later to avoid potential circular dependency.
    },
  },
}

const InputObjectNestedNonNull: $$Utilities.SchemaDrivenDataMap.InputObject = {
  n: 'InputObjectNestedNonNull',
  fcs: ['InputObject'],
  f: {
    InputObject: {
      // nt: InputObject, <-- Assigned later to avoid potential circular dependency.
    },
  },
}

//
//
//
//
//
//
// ==================================================================================================
//                                            OutputObject
// ==================================================================================================
//
//
//
//
//
//

const Bar: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    int: {},
  },
}

const DateObject1: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    date1: {
      nt: Date,
    },
  },
}

const DateObject2: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    date2: {
      nt: Date,
    },
  },
}

const ErrorOne: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    infoId: {},
    message: {},
  },
}

const ErrorTwo: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    infoInt: {},
    message: {},
  },
}

const Foo: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    id: {},
  },
}

const Object1: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    ABCEnum: {},
    boolean: {},
    float: {},
    id: {},
    int: {},
    string: {},
  },
}

const Object1ImplementingInterface: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    id: {},
    int: {},
  },
}

const Object2ImplementingInterface: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    boolean: {},
    id: {},
  },
}

const ObjectNested: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    id: {},
    object: {
      // nt: Object1, <-- Assigned later to avoid potential circular dependency.
    },
  },
}

const ObjectUnion: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    fooBarUnion: {
      // nt: FooBarUnion, <-- Assigned later to avoid potential circular dependency.
    },
  },
}

const lowerCaseObject: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    id: {},
  },
}

const lowerCaseObject2: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    int: {},
  },
}

//
//
//
//
//
//
// ==================================================================================================
//                                             Interface
// ==================================================================================================
//
//
//
//
//
//

const DateInterface1: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    ...DateObject1.f,
  },
}

const Error: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {},
}

const Interface: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {},
}

//
//
//
//
//
//
// ==================================================================================================
//                                               Union
// ==================================================================================================
//
//
//
//
//
//

const DateUnion: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    ...DateObject1.f,
    ...DateObject2.f,
  },
}

const FooBarUnion: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {},
}

const Result: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {},
}

const lowerCaseUnion: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {},
}

//
//
//
//
//
//
// ==================================================================================================
//                                                Root
// ==================================================================================================
//
//
//
//
//
//

const Mutation: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    id: {},
    idNonNull: {},
  },
}

const Query: $$Utilities.SchemaDrivenDataMap.OutputObject = {
  f: {
    InputObjectNested: {
      a: {
        input: {
          nt: InputObjectNested,
          it: [0],
        },
      },
    },
    InputObjectNestedNonNull: {
      a: {
        input: {
          nt: InputObjectNestedNonNull,
          it: [1],
        },
      },
    },
    abcEnum: {},
    argInputObjectCircular: {
      a: {
        input: {
          nt: InputObjectCircular,
          it: [0],
        },
      },
    },
    date: {
      nt: Date,
    },
    dateArg: {
      a: {
        date: {
          nt: Date,
          it: [0],
        },
      },
      nt: Date,
    },
    dateArgInputObject: {
      a: {
        input: {
          nt: InputObject,
          it: [0],
        },
      },
      nt: Date,
    },
    dateArgList: {
      a: {
        date: {
          nt: Date,
          it: [0, [1]],
        },
      },
      nt: Date,
    },
    dateArgNonNull: {
      a: {
        date: {
          nt: Date,
          it: [1],
        },
      },
      nt: Date,
    },
    dateArgNonNullList: {
      a: {
        date: {
          nt: Date,
          it: [1, [0]],
        },
      },
      nt: Date,
    },
    dateArgNonNullListNonNull: {
      a: {
        date: {
          nt: Date,
          it: [1, [1]],
        },
      },
      nt: Date,
    },
    dateInterface1: {
      // nt: DateInterface1, <-- Assigned later to avoid potential circular dependency.
    },
    dateList: {
      nt: Date,
    },
    dateListList: {
      nt: Date,
    },
    dateListNonNull: {
      nt: Date,
    },
    dateNonNull: {
      nt: Date,
    },
    dateObject1: {
      // nt: DateObject1, <-- Assigned later to avoid potential circular dependency.
    },
    dateUnion: {
      // nt: DateUnion, <-- Assigned later to avoid potential circular dependency.
    },
    error: {
      a: {
        case: {
          nt: String,
          it: [0],
        },
      },
    },
    id: {},
    idNonNull: {},
    interface: {
      // nt: Interface, <-- Assigned later to avoid potential circular dependency.
    },
    interfaceNonNull: {
      // nt: Interface, <-- Assigned later to avoid potential circular dependency.
    },
    interfaceWithArgs: {
      a: {
        id: {
          nt: ID,
          it: [1],
        },
      },
      // nt: Interface, <-- Assigned later to avoid potential circular dependency.
    },
    listInt: {},
    listIntNonNull: {},
    listListInt: {},
    listListIntNonNull: {},
    lowerCaseUnion: {
      // nt: lowerCaseUnion, <-- Assigned later to avoid potential circular dependency.
    },
    object: {
      // nt: Object1, <-- Assigned later to avoid potential circular dependency.
    },
    objectList: {
      // nt: Object1, <-- Assigned later to avoid potential circular dependency.
    },
    objectListNonNull: {
      // nt: Object1, <-- Assigned later to avoid potential circular dependency.
    },
    objectNested: {
      // nt: ObjectNested, <-- Assigned later to avoid potential circular dependency.
    },
    objectNonNull: {
      // nt: Object1, <-- Assigned later to avoid potential circular dependency.
    },
    objectWithArgs: {
      a: {
        boolean: {
          nt: Boolean,
          it: [0],
        },
        float: {
          nt: Float,
          it: [0],
        },
        id: {
          nt: ID,
          it: [0],
        },
        int: {
          nt: Int,
          it: [0],
        },
        string: {
          nt: String,
          it: [0],
        },
      },
      // nt: Object1, <-- Assigned later to avoid potential circular dependency.
    },
    result: {
      a: {
        case: {
          nt: Case,
          it: [1],
        },
      },
      // nt: Result, <-- Assigned later to avoid potential circular dependency.
    },
    resultNonNull: {
      a: {
        case: {
          nt: Case,
          it: [0],
        },
      },
      // nt: Result, <-- Assigned later to avoid potential circular dependency.
    },
    string: {},
    stringWithArgEnum: {
      a: {
        ABCEnum: {
          nt: ABCEnum,
          it: [0],
        },
      },
    },
    stringWithArgInputObject: {
      a: {
        input: {
          nt: InputObject,
          it: [0],
        },
      },
    },
    stringWithArgInputObjectRequired: {
      a: {
        input: {
          nt: InputObject,
          it: [1],
        },
      },
    },
    stringWithArgs: {
      a: {
        boolean: {
          nt: Boolean,
          it: [0],
        },
        float: {
          nt: Float,
          it: [0],
        },
        id: {
          nt: ID,
          it: [0],
        },
        int: {
          nt: Int,
          it: [0],
        },
        string: {
          nt: String,
          it: [0],
        },
      },
    },
    stringWithListArg: {
      a: {
        ints: {
          nt: Int,
          it: [0, [0]],
        },
      },
    },
    stringWithListArgRequired: {
      a: {
        ints: {
          nt: Int,
          it: [1, [1]],
        },
      },
    },
    stringWithRequiredArg: {
      a: {
        string: {
          nt: String,
          it: [1],
        },
      },
    },
    unionFooBar: {
      // nt: FooBarUnion, <-- Assigned later to avoid potential circular dependency.
    },
    unionFooBarNonNull: {
      // nt: FooBarUnion, <-- Assigned later to avoid potential circular dependency.
    },
    unionFooBarWithArgs: {
      a: {
        id: {
          nt: ID,
          it: [0],
        },
      },
      // nt: FooBarUnion, <-- Assigned later to avoid potential circular dependency.
    },
    unionObject: {
      // nt: ObjectUnion, <-- Assigned later to avoid potential circular dependency.
    },
    unionObjectNonNull: {
      // nt: ObjectUnion, <-- Assigned later to avoid potential circular dependency.
    },
  },
}

//
//
//
//
//
//
// ==================================================================================================
//                                       Reference Assignments
//                                (avoids circular assignment issues)
// ==================================================================================================
//
//
//
//
//
//

InputObjectCircular.f![\`circular\`]!.nt = InputObjectCircular
InputObjectNested.f![\`InputObject\`]!.nt = InputObject
InputObjectNestedNonNull.f![\`InputObject\`]!.nt = InputObject
ObjectNested.f[\`object\`]!.nt = Object1
ObjectUnion.f[\`fooBarUnion\`]!.nt = FooBarUnion
Query.f[\`dateInterface1\`]!.nt = DateInterface1
Query.f[\`dateObject1\`]!.nt = DateObject1
Query.f[\`dateUnion\`]!.nt = DateUnion
Query.f[\`interface\`]!.nt = Interface
Query.f[\`interfaceNonNull\`]!.nt = Interface
Query.f[\`interfaceWithArgs\`]!.nt = Interface
Query.f[\`lowerCaseUnion\`]!.nt = lowerCaseUnion
Query.f[\`object\`]!.nt = Object1
Query.f[\`objectList\`]!.nt = Object1
Query.f[\`objectListNonNull\`]!.nt = Object1
Query.f[\`objectNested\`]!.nt = ObjectNested
Query.f[\`objectNonNull\`]!.nt = Object1
Query.f[\`objectWithArgs\`]!.nt = Object1
Query.f[\`result\`]!.nt = Result
Query.f[\`resultNonNull\`]!.nt = Result
Query.f[\`unionFooBar\`]!.nt = FooBarUnion
Query.f[\`unionFooBarNonNull\`]!.nt = FooBarUnion
Query.f[\`unionFooBarWithArgs\`]!.nt = FooBarUnion
Query.f[\`unionObject\`]!.nt = ObjectUnion
Query.f[\`unionObjectNonNull\`]!.nt = ObjectUnion

//
//
//
//
//
//
// ==================================================================================================
//                                               Index
// ==================================================================================================
//
//
//
//
//
//

const $schemaDrivenDataMap: $$Utilities.SchemaDrivenDataMap = {
  roots: {
    Mutation,
    Query,
  },
  directives: {},
  types: {
    Boolean,
    Float,
    ID,
    Int,
    String,
    Date,
    ABCEnum,
    Case,
    InputObject,
    InputObjectCircular,
    InputObjectNested,
    InputObjectNestedNonNull,
    Bar,
    DateObject1,
    DateObject2,
    ErrorOne,
    ErrorTwo,
    Foo,
    Object1,
    Object1ImplementingInterface,
    Object2ImplementingInterface,
    ObjectNested,
    ObjectUnion,
    lowerCaseObject,
    lowerCaseObject2,
    DateInterface1,
    Error,
    Interface,
    DateUnion,
    FooBarUnion,
    Result,
    lowerCaseUnion,
    Mutation,
    Query,
  },
}

export { $schemaDrivenDataMap as schemaDrivenDataMap }
"
`;

exports[`kitchen-sink generated modules > modules/Select.ts 1`] = `
"import type { InferResult } from '../../../../../../src/entrypoints/schema.js'
import * as Data from './Data.js'
import type { Schema } from './Schema.js'
import type * as SelectionSets from './SelectionSets.js'

//
//
//
//
//
//
// ==================================================================================================
//                                              Runtime
// ==================================================================================================
//
//
//
//
//
//
import { createSelect } from '../../../../../../src/entrypoints/client.js'
export const Select = createSelect(Data.Name)

//
//
//
//
//
//
// ==================================================================================================
//                                             Buildtime
// ==================================================================================================
//
//
//
//
//
//

export namespace Select {
  // Root Types
  // ----------
  export type Mutation<$SelectionSet extends SelectionSets.Mutation> = InferResult.Root<
    $SelectionSet,
    Schema,
    'Mutation'
  >
  export type Query<$SelectionSet extends SelectionSets.Query> = InferResult.Root<$SelectionSet, Schema, 'Query'>
  // OutputObject Types
  // ------------------
  export type Bar<$SelectionSet extends SelectionSets.Bar> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['Bar']
  >
  export type DateObject1<$SelectionSet extends SelectionSets.DateObject1> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['DateObject1']
  >
  export type DateObject2<$SelectionSet extends SelectionSets.DateObject2> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['DateObject2']
  >
  export type ErrorOne<$SelectionSet extends SelectionSets.ErrorOne> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['ErrorOne']
  >
  export type ErrorTwo<$SelectionSet extends SelectionSets.ErrorTwo> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['ErrorTwo']
  >
  export type Foo<$SelectionSet extends SelectionSets.Foo> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['Foo']
  >
  export type Object1<$SelectionSet extends SelectionSets.Object1> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['Object1']
  >
  export type Object1ImplementingInterface<$SelectionSet extends SelectionSets.Object1ImplementingInterface> =
    InferResult.OutputObject<$SelectionSet, Schema, Schema['allTypes']['Object1ImplementingInterface']>
  export type Object2ImplementingInterface<$SelectionSet extends SelectionSets.Object2ImplementingInterface> =
    InferResult.OutputObject<$SelectionSet, Schema, Schema['allTypes']['Object2ImplementingInterface']>
  export type ObjectNested<$SelectionSet extends SelectionSets.ObjectNested> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['ObjectNested']
  >
  export type ObjectUnion<$SelectionSet extends SelectionSets.ObjectUnion> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['ObjectUnion']
  >
  export type lowerCaseObject<$SelectionSet extends SelectionSets.lowerCaseObject> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['lowerCaseObject']
  >
  export type lowerCaseObject2<$SelectionSet extends SelectionSets.lowerCaseObject2> = InferResult.OutputObject<
    $SelectionSet,
    Schema,
    Schema['allTypes']['lowerCaseObject2']
  >
  // Union Types
  // -----------
  export type DateUnion<$SelectionSet extends SelectionSets.DateUnion> = InferResult.Union<
    $SelectionSet,
    Schema,
    Schema['allTypes']['DateUnion']
  >
  export type FooBarUnion<$SelectionSet extends SelectionSets.FooBarUnion> = InferResult.Union<
    $SelectionSet,
    Schema,
    Schema['allTypes']['FooBarUnion']
  >
  export type Result<$SelectionSet extends SelectionSets.Result> = InferResult.Union<
    $SelectionSet,
    Schema,
    Schema['allTypes']['Result']
  >
  export type lowerCaseUnion<$SelectionSet extends SelectionSets.lowerCaseUnion> = InferResult.Union<
    $SelectionSet,
    Schema,
    Schema['allTypes']['lowerCaseUnion']
  >
  // Interface Types
  // ---------------
  export type DateInterface1<$SelectionSet extends SelectionSets.DateInterface1> = InferResult.Interface<
    $SelectionSet,
    Schema,
    Schema['allTypes']['DateInterface1']
  >
  export type Error<$SelectionSet extends SelectionSets.Error> = InferResult.Interface<
    $SelectionSet,
    Schema,
    Schema['allTypes']['Error']
  >
  export type Interface<$SelectionSet extends SelectionSets.Interface> = InferResult.Interface<
    $SelectionSet,
    Schema,
    Schema['allTypes']['Interface']
  >
}
"
`;

exports[`kitchen-sink generated modules > modules/SelectionSets.ts 1`] = `
"import type { Select as $Select } from '../../../../../../src/entrypoints/schema.js'
import type * as $$Utilities from '../../../../../../src/entrypoints/utilities-for-generated.js'
import type * as $Scalar from './Scalar.js'

//
//
//
//
//
//
// ==================================================================================================
//                                              Document
// ==================================================================================================
//
//
//
//
//
//

// Prefix with $ because this is not a schema type. A user could have a schema type named "Document" that this would conflict with.
export interface $Document<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  query?: Record<string, Query<$Scalars>>
  mutation?: Record<string, Mutation<$Scalars>>
}

//
//
//
//
//
//
// ==================================================================================================
//                                                Root
// ==================================================================================================
//
//
//
//
//
//

//
//
//
//
// GRAPHQL SELECTION SET
// ROOT
// --------------------------------------------------------------------------------------------------
//                                              Mutation
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface Mutation<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  /**
   * Select the \`id\` field on the \`Mutation\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  id?: Mutation.id$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Mutation.id<$Scalars>>
  /**
   * Select the \`idNonNull\` field on the \`Mutation\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  idNonNull?: Mutation.idNonNull$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Mutation.idNonNull<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Mutation$FragmentInline<$Scalars>
    | Mutation$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Mutation$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Mutation<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace Mutation {
  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type idNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | idNonNull$SelectionSet<$Scalars>

  export interface idNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`idNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type idNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | idNonNull$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// ROOT
// --------------------------------------------------------------------------------------------------
//                                               Query
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface Query<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> {
  /**
   * Select the \`InputObjectNested\` field on the \`Query\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  InputObjectNested?:
    | Query.InputObjectNested$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.InputObjectNested<$Scalars>>
  /**
   * Select the \`InputObjectNestedNonNull\` field on the \`Query\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  InputObjectNestedNonNull?:
    | Query.InputObjectNestedNonNull<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.InputObjectNestedNonNull<$Scalars>>
  /**
   * Select the \`abcEnum\` field on the \`Query\` object. Its type is \`ABCEnum\` (a \`Enum\` kind of type).
   */
  abcEnum?: Query.abcEnum$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.abcEnum<$Scalars>>
  /**
   * Select the \`argInputObjectCircular\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  argInputObjectCircular?:
    | Query.argInputObjectCircular$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.argInputObjectCircular<$Scalars>>
  /**
   * Select the \`date\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  date?: Query.date$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.date<$Scalars>>
  /**
   * Select the \`dateArg\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateArg?: Query.dateArg$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.dateArg<$Scalars>>
  /**
   * Select the \`dateArgInputObject\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateArgInputObject?:
    | Query.dateArgInputObject$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.dateArgInputObject<$Scalars>>
  /**
   * Select the \`dateArgList\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateArgList?: Query.dateArgList$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.dateArgList<$Scalars>>
  /**
   * Select the \`dateArgNonNull\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateArgNonNull?: Query.dateArgNonNull<$Scalars> | $Select.SelectAlias.SelectAlias<Query.dateArgNonNull<$Scalars>>
  /**
   * Select the \`dateArgNonNullList\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateArgNonNullList?:
    | Query.dateArgNonNullList<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.dateArgNonNullList<$Scalars>>
  /**
   * Select the \`dateArgNonNullListNonNull\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateArgNonNullListNonNull?:
    | Query.dateArgNonNullListNonNull<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.dateArgNonNullListNonNull<$Scalars>>
  /**
   * Select the \`dateInterface1\` field on the \`Query\` object. Its type is \`DateInterface1\` (a \`Interface\` kind of type).
   */
  dateInterface1?:
    | Query.dateInterface1$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.dateInterface1<$Scalars>>
  /**
   * Select the \`dateList\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateList?: Query.dateList$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.dateList<$Scalars>>
  /**
   * Select the \`dateListList\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateListList?: Query.dateListList$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.dateListList<$Scalars>>
  /**
   * Select the \`dateListNonNull\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateListNonNull?:
    | Query.dateListNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.dateListNonNull<$Scalars>>
  /**
   * Select the \`dateNonNull\` field on the \`Query\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  dateNonNull?: Query.dateNonNull$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.dateNonNull<$Scalars>>
  /**
   * Select the \`dateObject1\` field on the \`Query\` object. Its type is \`DateObject1\` (a \`OutputObject\` kind of type).
   */
  dateObject1?: Query.dateObject1$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.dateObject1<$Scalars>>
  /**
   * Select the \`dateUnion\` field on the \`Query\` object. Its type is \`DateUnion\` (a \`Union\` kind of type).
   */
  dateUnion?: Query.dateUnion$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.dateUnion<$Scalars>>
  /**
   * Select the \`error\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  error?: Query.error$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.error<$Scalars>>
  /**
   * Select the \`id\` field on the \`Query\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  id?: Query.id$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.id<$Scalars>>
  /**
   * Select the \`idNonNull\` field on the \`Query\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  idNonNull?: Query.idNonNull$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.idNonNull<$Scalars>>
  /**
   * Select the \`interface\` field on the \`Query\` object. Its type is \`Interface\` (a \`Interface\` kind of type).
   */
  interface?: Query.$interface$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.$interface<$Scalars>>
  /**
   * Select the \`interfaceNonNull\` field on the \`Query\` object. Its type is \`Interface\` (a \`Interface\` kind of type).
   */
  interfaceNonNull?:
    | Query.interfaceNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.interfaceNonNull<$Scalars>>
  /**
   * Select the \`interfaceWithArgs\` field on the \`Query\` object. Its type is \`Interface\` (a \`Interface\` kind of type).
   */
  interfaceWithArgs?:
    | Query.interfaceWithArgs<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.interfaceWithArgs<$Scalars>>
  /**
   * Select the \`listInt\` field on the \`Query\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  listInt?: Query.listInt$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.listInt<$Scalars>>
  /**
   * Select the \`listIntNonNull\` field on the \`Query\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  listIntNonNull?:
    | Query.listIntNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.listIntNonNull<$Scalars>>
  /**
   * Select the \`listListInt\` field on the \`Query\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  listListInt?: Query.listListInt$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.listListInt<$Scalars>>
  /**
   * Select the \`listListIntNonNull\` field on the \`Query\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  listListIntNonNull?:
    | Query.listListIntNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.listListIntNonNull<$Scalars>>
  /**
   * Select the \`lowerCaseUnion\` field on the \`Query\` object. Its type is \`lowerCaseUnion\` (a \`Union\` kind of type).
   */
  lowerCaseUnion?:
    | Query.lowerCaseUnion$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.lowerCaseUnion<$Scalars>>
  /**
   * Select the \`object\` field on the \`Query\` object. Its type is \`Object1\` (a \`OutputObject\` kind of type).
   */
  object?: Query.$object$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.$object<$Scalars>>
  /**
   * Select the \`objectList\` field on the \`Query\` object. Its type is \`Object1\` (a \`OutputObject\` kind of type).
   */
  objectList?: Query.objectList$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.objectList<$Scalars>>
  /**
   * Select the \`objectListNonNull\` field on the \`Query\` object. Its type is \`Object1\` (a \`OutputObject\` kind of type).
   */
  objectListNonNull?:
    | Query.objectListNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.objectListNonNull<$Scalars>>
  /**
   * Select the \`objectNested\` field on the \`Query\` object. Its type is \`ObjectNested\` (a \`OutputObject\` kind of type).
   */
  objectNested?: Query.objectNested$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.objectNested<$Scalars>>
  /**
   * Select the \`objectNonNull\` field on the \`Query\` object. Its type is \`Object1\` (a \`OutputObject\` kind of type).
   */
  objectNonNull?:
    | Query.objectNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.objectNonNull<$Scalars>>
  /**
   * Select the \`objectWithArgs\` field on the \`Query\` object. Its type is \`Object1\` (a \`OutputObject\` kind of type).
   */
  objectWithArgs?:
    | Query.objectWithArgs$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.objectWithArgs<$Scalars>>
  /**
   * Select the \`result\` field on the \`Query\` object. Its type is \`Result\` (a \`Union\` kind of type).
   */
  result?: Query.result<$Scalars> | $Select.SelectAlias.SelectAlias<Query.result<$Scalars>>
  /**
   * Select the \`resultNonNull\` field on the \`Query\` object. Its type is \`Result\` (a \`Union\` kind of type).
   */
  resultNonNull?:
    | Query.resultNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.resultNonNull<$Scalars>>
  /**
   * Select the \`string\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  string?: Query.$string$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.$string<$Scalars>>
  /**
   * Select the \`stringWithArgEnum\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  stringWithArgEnum?:
    | Query.stringWithArgEnum$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.stringWithArgEnum<$Scalars>>
  /**
   * Select the \`stringWithArgInputObject\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  stringWithArgInputObject?:
    | Query.stringWithArgInputObject$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.stringWithArgInputObject<$Scalars>>
  /**
   * Select the \`stringWithArgInputObjectRequired\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  stringWithArgInputObjectRequired?:
    | Query.stringWithArgInputObjectRequired<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.stringWithArgInputObjectRequired<$Scalars>>
  /**
   * Select the \`stringWithArgs\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  stringWithArgs?:
    | Query.stringWithArgs$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.stringWithArgs<$Scalars>>
  /**
   * Select the \`stringWithListArg\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  stringWithListArg?:
    | Query.stringWithListArg$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.stringWithListArg<$Scalars>>
  /**
   * Select the \`stringWithListArgRequired\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  stringWithListArgRequired?:
    | Query.stringWithListArgRequired<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.stringWithListArgRequired<$Scalars>>
  /**
   * Select the \`stringWithRequiredArg\` field on the \`Query\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  stringWithRequiredArg?:
    | Query.stringWithRequiredArg<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.stringWithRequiredArg<$Scalars>>
  /**
   * Select the \`unionFooBar\` field on the \`Query\` object. Its type is \`FooBarUnion\` (a \`Union\` kind of type).
   */
  unionFooBar?: Query.unionFooBar$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.unionFooBar<$Scalars>>
  /**
   * Select the \`unionFooBarNonNull\` field on the \`Query\` object. Its type is \`FooBarUnion\` (a \`Union\` kind of type).
   */
  unionFooBarNonNull?:
    | Query.unionFooBarNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.unionFooBarNonNull<$Scalars>>
  /**
   * Select the \`unionFooBarWithArgs\` field on the \`Query\` object. Its type is \`FooBarUnion\` (a \`Union\` kind of type).
   */
  unionFooBarWithArgs?:
    | Query.unionFooBarWithArgs$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.unionFooBarWithArgs<$Scalars>>
  /**
   * Select the \`unionObject\` field on the \`Query\` object. Its type is \`ObjectUnion\` (a \`OutputObject\` kind of type).
   */
  unionObject?: Query.unionObject$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Query.unionObject<$Scalars>>
  /**
   * Select the \`unionObjectNonNull\` field on the \`Query\` object. Its type is \`ObjectUnion\` (a \`OutputObject\` kind of type).
   */
  unionObjectNonNull?:
    | Query.unionObjectNonNull$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Query.unionObjectNonNull<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Query$FragmentInline<$Scalars>
    | Query$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Query$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Query<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace Query {
  export type InputObjectNested<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | InputObjectNested$SelectionSet<$Scalars>

  export interface InputObjectNested$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`InputObjectNested\` field. No arguments are required so you may omit this.
     */
    $?: InputObjectNested$Arguments<$Scalars>
  }

  export interface InputObjectNested$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    input?: $NamedTypes.$InputObjectNested<$Scalars> | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`InputObjectNested\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type InputObjectNested$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | InputObjectNested$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type InputObjectNestedNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = InputObjectNestedNonNull$SelectionSet<$Scalars>

  export interface InputObjectNestedNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`InputObjectNestedNonNull\` field. All arguments are required so you must include this.
     */
    $: InputObjectNestedNonNull$Arguments<$Scalars>
  }

  export interface InputObjectNestedNonNull$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    input: $NamedTypes.$InputObjectNestedNonNull<$Scalars>
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`InputObjectNestedNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type InputObjectNestedNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    InputObjectNestedNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type abcEnum<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | abcEnum$SelectionSet<$Scalars>

  export interface abcEnum$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`abcEnum\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type abcEnum$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | abcEnum$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type argInputObjectCircular<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | argInputObjectCircular$SelectionSet<$Scalars>

  export interface argInputObjectCircular$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`argInputObjectCircular\` field. No arguments are required so you may omit this.
     */
    $?: argInputObjectCircular$Arguments<$Scalars>
  }

  export interface argInputObjectCircular$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    input?: $NamedTypes.$InputObjectCircular<$Scalars> | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`argInputObjectCircular\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type argInputObjectCircular$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | argInputObjectCircular$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type date<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | date$SelectionSet<$Scalars>

  export interface date$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`date\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type date$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | date$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateArg<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | dateArg$SelectionSet<$Scalars>

  export interface dateArg$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`dateArg\` field. No arguments are required so you may omit this.
     */
    $?: dateArg$Arguments<$Scalars>
  }

  export interface dateArg$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    date?:
      | $$Utilities.Schema.Scalar.GetDecoded<
        $$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'Date', $Scalars>
      >
      | undefined
      | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateArg\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateArg$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | dateArg$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateArgInputObject<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | dateArgInputObject$SelectionSet<$Scalars>

  export interface dateArgInputObject$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`dateArgInputObject\` field. No arguments are required so you may omit this.
     */
    $?: dateArgInputObject$Arguments<$Scalars>
  }

  export interface dateArgInputObject$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    input?: $NamedTypes.$InputObject<$Scalars> | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateArgInputObject\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateArgInputObject$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | dateArgInputObject$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateArgList<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | dateArgList$SelectionSet<$Scalars>

  export interface dateArgList$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`dateArgList\` field. No arguments are required so you may omit this.
     */
    $?: dateArgList$Arguments<$Scalars>
  }

  export interface dateArgList$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    date?:
      | Array<
        | $$Utilities.Schema.Scalar.GetDecoded<
          $$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'Date', $Scalars>
        >
        | undefined
        | null
      >
      | undefined
      | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateArgList\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateArgList$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | dateArgList$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateArgNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = dateArgNonNull$SelectionSet<$Scalars>

  export interface dateArgNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`dateArgNonNull\` field. All arguments are required so you must include this.
     */
    $: dateArgNonNull$Arguments<$Scalars>
  }

  export interface dateArgNonNull$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    date: $$Utilities.Schema.Scalar.GetDecoded<
      $$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'Date', $Scalars>
    >
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateArgNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateArgNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    dateArgNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateArgNonNullList<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = dateArgNonNullList$SelectionSet<$Scalars>

  export interface dateArgNonNullList$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`dateArgNonNullList\` field. All arguments are required so you must include this.
     */
    $: dateArgNonNullList$Arguments<$Scalars>
  }

  export interface dateArgNonNullList$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    date: Array<
      | $$Utilities.Schema.Scalar.GetDecoded<
        $$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'Date', $Scalars>
      >
      | undefined
      | null
    >
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateArgNonNullList\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateArgNonNullList$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    dateArgNonNullList$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateArgNonNullListNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = dateArgNonNullListNonNull$SelectionSet<$Scalars>

  export interface dateArgNonNullListNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`dateArgNonNullListNonNull\` field. All arguments are required so you must include this.
     */
    $: dateArgNonNullListNonNull$Arguments<$Scalars>
  }

  export interface dateArgNonNullListNonNull$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    date: Array<
      | $$Utilities.Schema.Scalar.GetDecoded<
        $$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'Date', $Scalars>
      >
      | undefined
      | null
    >
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateArgNonNullListNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateArgNonNullListNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    dateArgNonNullListNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateInterface1<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = dateInterface1$SelectionSet<$Scalars>

  export interface dateInterface1$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$DateInterface1<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateInterface1\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateInterface1$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    dateInterface1$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateList<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | dateList$SelectionSet<$Scalars>

  export interface dateList$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateList\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateList$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | dateList$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateListList<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | dateListList$SelectionSet<$Scalars>

  export interface dateListList$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateListList\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateListList$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | dateListList$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateListNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | dateListNonNull$SelectionSet<$Scalars>

  export interface dateListNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateListNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateListNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | dateListNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | dateNonNull$SelectionSet<$Scalars>

  export interface dateNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | dateNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateObject1<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = dateObject1$SelectionSet<$Scalars>

  export interface dateObject1$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$DateObject1<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateObject1\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateObject1$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    dateObject1$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type dateUnion<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = dateUnion$SelectionSet<$Scalars>

  export interface dateUnion$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$DateUnion<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`dateUnion\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type dateUnion$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    dateUnion$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type error<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | error$SelectionSet<$Scalars>

  export interface error$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`error\` field. No arguments are required so you may omit this.
     */
    $?: error$Arguments<$Scalars>
  }

  export interface error$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    case?: string | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`error\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type error$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | error$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type idNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | idNonNull$SelectionSet<$Scalars>

  export interface idNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`idNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type idNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | idNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type $interface<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $interface$SelectionSet<$Scalars>

  export interface $interface$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Interface<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`$interface\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type $interface$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    $interface$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type interfaceNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = interfaceNonNull$SelectionSet<$Scalars>

  export interface interfaceNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Interface<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`interfaceNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type interfaceNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    interfaceNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type interfaceWithArgs<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = interfaceWithArgs$SelectionSet<$Scalars>

  export interface interfaceWithArgs$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Interface<$Scalars> {
    /**
     * Arguments for \`interfaceWithArgs\` field. All arguments are required so you must include this.
     */
    $: interfaceWithArgs$Arguments<$Scalars>
  }

  export interface interfaceWithArgs$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    id: string
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`interfaceWithArgs\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type interfaceWithArgs$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    interfaceWithArgs$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type listInt<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | listInt$SelectionSet<$Scalars>

  export interface listInt$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`listInt\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type listInt$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | listInt$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type listIntNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | listIntNonNull$SelectionSet<$Scalars>

  export interface listIntNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`listIntNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type listIntNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | listIntNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type listListInt<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | listListInt$SelectionSet<$Scalars>

  export interface listListInt$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`listListInt\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type listListInt$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | listListInt$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type listListIntNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | listListIntNonNull$SelectionSet<$Scalars>

  export interface listListIntNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`listListIntNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type listListIntNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | listListIntNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type lowerCaseUnion<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = lowerCaseUnion$SelectionSet<$Scalars>

  export interface lowerCaseUnion$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$lowerCaseUnion<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`lowerCaseUnion\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type lowerCaseUnion$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    lowerCaseUnion$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type $object<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    $object$SelectionSet<$Scalars>

  export interface $object$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Object1<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`$object\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type $object$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    $object$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type objectList<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = objectList$SelectionSet<$Scalars>

  export interface objectList$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Object1<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`objectList\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type objectList$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    objectList$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type objectListNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = objectListNonNull$SelectionSet<$Scalars>

  export interface objectListNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Object1<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`objectListNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type objectListNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    objectListNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type objectNested<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = objectNested$SelectionSet<$Scalars>

  export interface objectNested$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$ObjectNested<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`objectNested\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type objectNested$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    objectNested$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type objectNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = objectNonNull$SelectionSet<$Scalars>

  export interface objectNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Object1<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`objectNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type objectNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    objectNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type objectWithArgs<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = objectWithArgs$SelectionSet<$Scalars>

  export interface objectWithArgs$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Object1<$Scalars> {
    /**
     * Arguments for \`objectWithArgs\` field. No arguments are required so you may omit this.
     */
    $?: objectWithArgs$Arguments<$Scalars>
  }

  export interface objectWithArgs$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    boolean?: boolean | undefined | null

    float?: number | undefined | null

    id?: string | undefined | null

    int?: number | undefined | null

    string?: string | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`objectWithArgs\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type objectWithArgs$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    objectWithArgs$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type result<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    result$SelectionSet<$Scalars>

  export interface result$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Result<$Scalars> {
    /**
     * Arguments for \`result\` field. All arguments are required so you must include this.
     */
    $: result$Arguments<$Scalars>
  }

  export interface result$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    $case: $NamedTypes.$Case
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`result\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type result$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    result$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type resultNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = resultNonNull$SelectionSet<$Scalars>

  export interface resultNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Result<$Scalars> {
    /**
     * Arguments for \`resultNonNull\` field. No arguments are required so you may omit this.
     */
    $?: resultNonNull$Arguments<$Scalars>
  }

  export interface resultNonNull$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    $case?: $NamedTypes.$Case | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`resultNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type resultNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    resultNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type $string<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | $string$SelectionSet<$Scalars>

  export interface $string$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`$string\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type $string$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | $string$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type stringWithArgEnum<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | stringWithArgEnum$SelectionSet<$Scalars>

  export interface stringWithArgEnum$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`stringWithArgEnum\` field. No arguments are required so you may omit this.
     */
    $?: stringWithArgEnum$Arguments<$Scalars>
  }

  export interface stringWithArgEnum$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    $ABCEnum?: $NamedTypes.$ABCEnum | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`stringWithArgEnum\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type stringWithArgEnum$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | stringWithArgEnum$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type stringWithArgInputObject<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | stringWithArgInputObject$SelectionSet<$Scalars>

  export interface stringWithArgInputObject$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`stringWithArgInputObject\` field. No arguments are required so you may omit this.
     */
    $?: stringWithArgInputObject$Arguments<$Scalars>
  }

  export interface stringWithArgInputObject$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    input?: $NamedTypes.$InputObject<$Scalars> | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`stringWithArgInputObject\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type stringWithArgInputObject$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | stringWithArgInputObject$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type stringWithArgInputObjectRequired<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = stringWithArgInputObjectRequired$SelectionSet<$Scalars>

  export interface stringWithArgInputObjectRequired$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`stringWithArgInputObjectRequired\` field. All arguments are required so you must include this.
     */
    $: stringWithArgInputObjectRequired$Arguments<$Scalars>
  }

  export interface stringWithArgInputObjectRequired$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    input: $NamedTypes.$InputObject<$Scalars>
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`stringWithArgInputObjectRequired\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type stringWithArgInputObjectRequired$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    stringWithArgInputObjectRequired$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type stringWithArgs<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | stringWithArgs$SelectionSet<$Scalars>

  export interface stringWithArgs$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`stringWithArgs\` field. No arguments are required so you may omit this.
     */
    $?: stringWithArgs$Arguments<$Scalars>
  }

  export interface stringWithArgs$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    boolean?: boolean | undefined | null

    float?: number | undefined | null

    id?: string | undefined | null
    /**
     * @deprecated Example of argument deprecation reason here.
     */
    int?: number | undefined | null
    /**
     * Example of some argument documentation here.
     */
    string?: string | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`stringWithArgs\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type stringWithArgs$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | stringWithArgs$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type stringWithListArg<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > =
    | $Select.Indicator.NoArgsIndicator
    | stringWithListArg$SelectionSet<$Scalars>

  export interface stringWithListArg$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`stringWithListArg\` field. No arguments are required so you may omit this.
     */
    $?: stringWithListArg$Arguments<$Scalars>
  }

  export interface stringWithListArg$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    ints?: Array<number | undefined | null> | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`stringWithListArg\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type stringWithListArg$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | stringWithListArg$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type stringWithListArgRequired<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = stringWithListArgRequired$SelectionSet<$Scalars>

  export interface stringWithListArgRequired$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`stringWithListArgRequired\` field. All arguments are required so you must include this.
     */
    $: stringWithListArgRequired$Arguments<$Scalars>
  }

  export interface stringWithListArgRequired$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    ints: Array<number | undefined | null>
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`stringWithListArgRequired\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type stringWithListArgRequired$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    stringWithListArgRequired$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type stringWithRequiredArg<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = stringWithRequiredArg$SelectionSet<$Scalars>

  export interface stringWithRequiredArg$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    /**
     * Arguments for \`stringWithRequiredArg\` field. All arguments are required so you must include this.
     */
    $: stringWithRequiredArg$Arguments<$Scalars>
  }

  export interface stringWithRequiredArg$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    string: string
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`stringWithRequiredArg\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type stringWithRequiredArg$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    stringWithRequiredArg$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type unionFooBar<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = unionFooBar$SelectionSet<$Scalars>

  export interface unionFooBar$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$FooBarUnion<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`unionFooBar\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type unionFooBar$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    unionFooBar$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type unionFooBarNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = unionFooBarNonNull$SelectionSet<$Scalars>

  export interface unionFooBarNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$FooBarUnion<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`unionFooBarNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type unionFooBarNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    unionFooBarNonNull$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type unionFooBarWithArgs<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = unionFooBarWithArgs$SelectionSet<$Scalars>

  export interface unionFooBarWithArgs$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$FooBarUnion<$Scalars> {
    /**
     * Arguments for \`unionFooBarWithArgs\` field. No arguments are required so you may omit this.
     */
    $?: unionFooBarWithArgs$Arguments<$Scalars>
  }

  export interface unionFooBarWithArgs$Arguments<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {
    id?: string | undefined | null
  }

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`unionFooBarWithArgs\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type unionFooBarWithArgs$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    unionFooBarWithArgs$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type unionObject<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = unionObject$SelectionSet<$Scalars>

  export interface unionObject$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$ObjectUnion<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`unionObject\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type unionObject$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    unionObject$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type unionObjectNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = unionObjectNonNull$SelectionSet<$Scalars>

  export interface unionObjectNonNull$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$ObjectUnion<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`unionObjectNonNull\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type unionObjectNonNull$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    unionObjectNonNull$SelectionSet<$Scalars>
  >
}

//
//
//
//
//
//
// ==================================================================================================
//                                                Enum
// ==================================================================================================
//
//
//
//
//
//

/**
 * Enum documentation.
 *
 * Members
 * "A" - (DEPRECATED: Enum value A is deprecated.)
 * "B" - Enum B member documentation.
 * "C" - (DEPRECATED: Enum value C is deprecated.)
 */
export type ABCEnum = 'A' | 'B' | 'C'

export type Case = 'ErrorOne' | 'ErrorTwo' | 'Object1'

//
//
//
//
//
//
// ==================================================================================================
//                                            InputObject
// ==================================================================================================
//
//
//
//
//
//

export interface InputObject<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  date?:
    | $$Utilities.Schema.Scalar.GetDecoded<
      $$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'Date', $Scalars>
    >
    | undefined
    | null

  dateRequired: $$Utilities.Schema.Scalar.GetDecoded<
    $$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'Date', $Scalars>
  >

  id?: string | undefined | null

  idRequired: string
}

export interface InputObjectCircular<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  circular?: $NamedTypes.$InputObjectCircular<$Scalars> | undefined | null

  date?:
    | $$Utilities.Schema.Scalar.GetDecoded<
      $$Utilities.Schema.Scalar.LookupCustomScalarOrFallbackToString<'Date', $Scalars>
    >
    | undefined
    | null
}

export interface InputObjectNested<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  InputObject?: $NamedTypes.$InputObject<$Scalars> | undefined | null
}

export interface InputObjectNestedNonNull<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  InputObject: $NamedTypes.$InputObject<$Scalars>
}

//
//
//
//
//
//
// ==================================================================================================
//                                            OutputObject
// ==================================================================================================
//
//
//
//
//
//

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                                Bar
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface Bar<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty>
  extends $Select.Bases.ObjectLike
{
  /**
   * Select the \`int\` field on the \`Bar\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  int?: Bar.int$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Bar.int<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Bar$FragmentInline<$Scalars>
    | Bar$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Bar$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Bar<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace Bar {
  export type int<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | int$SelectionSet<$Scalars>

  export interface int$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`int\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type int$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | int$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                            DateObject1
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface DateObject1<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`date1\` field on the \`DateObject1\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  date1?: DateObject1.date1$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<DateObject1.date1<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | DateObject1$FragmentInline<$Scalars>
    | DateObject1$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface DateObject1$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends DateObject1<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace DateObject1 {
  export type date1<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | date1$SelectionSet<$Scalars>

  export interface date1$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`date1\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type date1$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | date1$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                            DateObject2
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface DateObject2<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`date2\` field on the \`DateObject2\` object. Its type is \`Date\` (a \`ScalarCustom\` kind of type).
   */
  date2?: DateObject2.date2$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<DateObject2.date2<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | DateObject2$FragmentInline<$Scalars>
    | DateObject2$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface DateObject2$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends DateObject2<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace DateObject2 {
  export type date2<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | date2$SelectionSet<$Scalars>

  export interface date2$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`date2\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type date2$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | date2$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                              ErrorOne
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface ErrorOne<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`infoId\` field on the \`ErrorOne\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  infoId?: ErrorOne.infoId$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<ErrorOne.infoId<$Scalars>>
  /**
   * Select the \`message\` field on the \`ErrorOne\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  message?: ErrorOne.message$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<ErrorOne.message<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | ErrorOne$FragmentInline<$Scalars>
    | ErrorOne$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface ErrorOne$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends ErrorOne<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace ErrorOne {
  export type infoId<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | infoId$SelectionSet<$Scalars>

  export interface infoId$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`infoId\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type infoId$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | infoId$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type message<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | message$SelectionSet<$Scalars>

  export interface message$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`message\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type message$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | message$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                              ErrorTwo
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface ErrorTwo<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`infoInt\` field on the \`ErrorTwo\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  infoInt?: ErrorTwo.infoInt$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<ErrorTwo.infoInt<$Scalars>>
  /**
   * Select the \`message\` field on the \`ErrorTwo\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  message?: ErrorTwo.message$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<ErrorTwo.message<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | ErrorTwo$FragmentInline<$Scalars>
    | ErrorTwo$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface ErrorTwo$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends ErrorTwo<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace ErrorTwo {
  export type infoInt<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | infoInt$SelectionSet<$Scalars>

  export interface infoInt$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`infoInt\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type infoInt$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | infoInt$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type message<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | message$SelectionSet<$Scalars>

  export interface message$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`message\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type message$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | message$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                                Foo
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

/**
 * Object documentation.
 */
export interface Foo<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty>
  extends $Select.Bases.ObjectLike
{
  /**
   * Select the \`id\` field on the \`Foo\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  id?: Foo.id$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Foo.id<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Foo$FragmentInline<$Scalars>
    | Foo$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Foo$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Foo<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace Foo {
  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                              Object1
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface Object1<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty>
  extends $Select.Bases.ObjectLike
{
  /**
   * Select the \`ABCEnum\` field on the \`Object1\` object. Its type is \`ABCEnum\` (a \`Enum\` kind of type).
   */
  ABCEnum?: Object1.ABCEnum$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Object1.ABCEnum<$Scalars>>
  /**
   * Select the \`boolean\` field on the \`Object1\` object. Its type is \`Boolean\` (a \`ScalarStandard\` kind of type).
   */
  boolean?: Object1.$boolean$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Object1.$boolean<$Scalars>>
  /**
   * Select the \`float\` field on the \`Object1\` object. Its type is \`Float\` (a \`ScalarStandard\` kind of type).
   */
  float?: Object1.float$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Object1.float<$Scalars>>
  /**
   * Select the \`id\` field on the \`Object1\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  id?: Object1.id$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Object1.id<$Scalars>>
  /**
   * Select the \`int\` field on the \`Object1\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  int?: Object1.int$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Object1.int<$Scalars>>
  /**
   * Select the \`string\` field on the \`Object1\` object. Its type is \`String\` (a \`ScalarStandard\` kind of type).
   */
  string?: Object1.$string$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<Object1.$string<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Object1$FragmentInline<$Scalars>
    | Object1$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Object1$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Object1<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace Object1 {
  export type ABCEnum<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | ABCEnum$SelectionSet<$Scalars>

  export interface ABCEnum$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`ABCEnum\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type ABCEnum$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | ABCEnum$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type $boolean<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | $boolean$SelectionSet<$Scalars>

  export interface $boolean$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`$boolean\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type $boolean$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | $boolean$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type float<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | float$SelectionSet<$Scalars>

  export interface float$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`float\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type float$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | float$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type int<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | int$SelectionSet<$Scalars>

  export interface int$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`int\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type int$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | int$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type $string<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | $string$SelectionSet<$Scalars>

  export interface $string$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`$string\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type $string$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | $string$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                    Object1ImplementingInterface
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface Object1ImplementingInterface<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`id\` field on the \`Object1ImplementingInterface\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  id?:
    | Object1ImplementingInterface.id$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Object1ImplementingInterface.id<$Scalars>>
  /**
   * Select the \`int\` field on the \`Object1ImplementingInterface\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  int?:
    | Object1ImplementingInterface.int$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Object1ImplementingInterface.int<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Object1ImplementingInterface$FragmentInline<$Scalars>
    | Object1ImplementingInterface$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Object1ImplementingInterface$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Object1ImplementingInterface<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace Object1ImplementingInterface {
  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type int<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | int$SelectionSet<$Scalars>

  export interface int$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`int\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type int$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | int$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                    Object2ImplementingInterface
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface Object2ImplementingInterface<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`boolean\` field on the \`Object2ImplementingInterface\` object. Its type is \`Boolean\` (a \`ScalarStandard\` kind of type).
   */
  boolean?:
    | Object2ImplementingInterface.$boolean$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Object2ImplementingInterface.$boolean<$Scalars>>
  /**
   * Select the \`id\` field on the \`Object2ImplementingInterface\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  id?:
    | Object2ImplementingInterface.id$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<Object2ImplementingInterface.id<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Object2ImplementingInterface$FragmentInline<$Scalars>
    | Object2ImplementingInterface$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Object2ImplementingInterface$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Object2ImplementingInterface<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace Object2ImplementingInterface {
  export type $boolean<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | $boolean$SelectionSet<$Scalars>

  export interface $boolean$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`$boolean\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type $boolean$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | $boolean$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                            ObjectNested
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface ObjectNested<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`id\` field on the \`ObjectNested\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  id?: ObjectNested.id$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<ObjectNested.id<$Scalars>>
  /**
   * Select the \`object\` field on the \`ObjectNested\` object. Its type is \`Object1\` (a \`OutputObject\` kind of type).
   */
  object?: ObjectNested.$object$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<ObjectNested.$object<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | ObjectNested$FragmentInline<$Scalars>
    | ObjectNested$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface ObjectNested$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends ObjectNested<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace ObjectNested {
  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >

  // --------------------------------------------------------------------------------------------------

  export type $object<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    $object$SelectionSet<$Scalars>

  export interface $object$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$Object1<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`$object\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type $object$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    $object$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                            ObjectUnion
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface ObjectUnion<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`fooBarUnion\` field on the \`ObjectUnion\` object. Its type is \`FooBarUnion\` (a \`Union\` kind of type).
   */
  fooBarUnion?:
    | ObjectUnion.fooBarUnion$Expanded<$Scalars>
    | $Select.SelectAlias.SelectAlias<ObjectUnion.fooBarUnion<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | ObjectUnion$FragmentInline<$Scalars>
    | ObjectUnion$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface ObjectUnion$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends ObjectUnion<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace ObjectUnion {
  export type fooBarUnion<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = fooBarUnion$SelectionSet<$Scalars>

  export interface fooBarUnion$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base, $NamedTypes.$FooBarUnion<$Scalars> {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`fooBarUnion\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type fooBarUnion$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    fooBarUnion$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                          lowerCaseObject
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface lowerCaseObject<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`id\` field on the \`lowerCaseObject\` object. Its type is \`ID\` (a \`ScalarStandard\` kind of type).
   */
  id?: lowerCaseObject.id$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<lowerCaseObject.id<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | lowerCaseObject$FragmentInline<$Scalars>
    | lowerCaseObject$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface lowerCaseObject$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends lowerCaseObject<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace lowerCaseObject {
  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >
}

//
//
//
//
// GRAPHQL SELECTION SET
// OUTPUTOBJECT
// --------------------------------------------------------------------------------------------------
//                                          lowerCaseObject2
// --------------------------------------------------------------------------------------------------
//
//

// ----------------------------------------| Entrypoint Interface |

export interface lowerCaseObject2<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  /**
   * Select the \`int\` field on the \`lowerCaseObject2\` object. Its type is \`Int\` (a \`ScalarStandard\` kind of type).
   */
  int?: lowerCaseObject2.int$Expanded<$Scalars> | $Select.SelectAlias.SelectAlias<lowerCaseObject2.int<$Scalars>>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | lowerCaseObject2$FragmentInline<$Scalars>
    | lowerCaseObject2$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface lowerCaseObject2$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends lowerCaseObject2<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

// ----------------------------------------| Fields |

export namespace lowerCaseObject2 {
  export type int<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | int$SelectionSet<$Scalars>

  export interface int$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`int\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type int$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | int$SelectionSet<$Scalars>
  >
}

//
//
//
//
//
//
// ==================================================================================================
//                                               Union
// ==================================================================================================
//
//
//
//
//
//

export interface DateUnion<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  ___on_DateObject1?: DateObject1<$Scalars>
  ___on_DateObject2?: DateObject2<$Scalars>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | DateUnion$FragmentInline<$Scalars>
    | DateUnion$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected. Since this is a union type and thus polymorphic,
   * the name is one of the member type names, whichever is ultimately returned at runtime.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}
export interface DateUnion$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends DateUnion<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

/**
 * Union documentation.
 */
export interface FooBarUnion<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  ___on_Bar?: Bar<$Scalars>
  ___on_Foo?: Foo<$Scalars>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | FooBarUnion$FragmentInline<$Scalars>
    | FooBarUnion$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected. Since this is a union type and thus polymorphic,
   * the name is one of the member type names, whichever is ultimately returned at runtime.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}
export interface FooBarUnion$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends FooBarUnion<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

export interface Result<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  ___on_ErrorOne?: ErrorOne<$Scalars>
  ___on_ErrorTwo?: ErrorTwo<$Scalars>
  ___on_Object1?: Object1<$Scalars>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Result$FragmentInline<$Scalars>
    | Result$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected. Since this is a union type and thus polymorphic,
   * the name is one of the member type names, whichever is ultimately returned at runtime.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}
export interface Result$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Result<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

export interface lowerCaseUnion<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> {
  ___on_lowerCaseObject?: lowerCaseObject<$Scalars>
  ___on_lowerCaseObject2?: lowerCaseObject2<$Scalars>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | lowerCaseUnion$FragmentInline<$Scalars>
    | lowerCaseUnion$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected. Since this is a union type and thus polymorphic,
   * the name is one of the member type names, whichever is ultimately returned at runtime.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}
export interface lowerCaseUnion$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends lowerCaseUnion<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

//
//
//
//
//
//
// ==================================================================================================
//                                             Interface
// ==================================================================================================
//
//
//
//
//
//

// Interface Type: DateInterface1
// --------------------------------------------------------------------------------------------------

export interface DateInterface1<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  date1?: DateInterface1.date1<$Scalars>
  ___on_DateObject1?: DateObject1<$Scalars>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | DateInterface1$FragmentInline<$Scalars>
    | DateInterface1$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected. Since this is a interface type and thus polymorphic,
   * the name is one of the implementor type names, whichever is ultimately returned at runtime.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface DateInterface1$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends DateInterface1<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

export namespace DateInterface1 {
  export type date1<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | date1$SelectionSet<$Scalars>

  export interface date1$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`date1\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type date1$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | date1$SelectionSet<$Scalars>
  >
}

// Interface Type: Error
// --------------------------------------------------------------------------------------------------

export interface Error<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty>
  extends $Select.Bases.ObjectLike
{
  message?: Error.message<$Scalars>
  ___on_ErrorOne?: ErrorOne<$Scalars>
  ___on_ErrorTwo?: ErrorTwo<$Scalars>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Error$FragmentInline<$Scalars>
    | Error$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected. Since this is a interface type and thus polymorphic,
   * the name is one of the implementor type names, whichever is ultimately returned at runtime.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Error$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Error<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

export namespace Error {
  export type message<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | message$SelectionSet<$Scalars>

  export interface message$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`message\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type message$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | message$SelectionSet<$Scalars>
  >
}

// Interface Type: Interface
// --------------------------------------------------------------------------------------------------

export interface Interface<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends $Select.Bases.ObjectLike {
  id?: Interface.id<$Scalars>
  ___on_Object1ImplementingInterface?: Object1ImplementingInterface<$Scalars>
  ___on_Object2ImplementingInterface?: Object2ImplementingInterface<$Scalars>

  /**
   * Inline fragments for field groups.
   *
   * Generally a niche feature. This can be useful for example to apply an \`@include\` directive to a subset of the
   * selection set in turn allowing you to pass a variable to opt in/out of that selection during execution on the server.
   *
   * @see https://spec.graphql.org/draft/#sec-Inline-Fragments
   */
  ___?:
    | Interface$FragmentInline<$Scalars>
    | Interface$FragmentInline<$Scalars>[]

  /**
   * A meta field. Is the name of the type being selected. Since this is a interface type and thus polymorphic,
   * the name is one of the implementor type names, whichever is ultimately returned at runtime.
   *
   * @see https://graphql.org/learn/queries/#meta-fields
   */
  __typename?:
    | $Select.Indicator.NoArgsIndicator$Expanded
    | $Select.SelectAlias.SelectAlias<$Select.Indicator.NoArgsIndicator>
}

export interface Interface$FragmentInline<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
> extends Interface<$Scalars>, $Select.Directive.$Groups.InlineFragment.Fields {}

export namespace Interface {
  export type id<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>

  export interface id$SelectionSet<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > extends $Select.Bases.Base {}

  // --- expanded ---

  /**
   * This is the "expanded" version of the \`id\` type. It is identical except for the fact
   * that IDEs will display its contents (a union type) directly, rather than the name of this type.
   * In some cases, this is a preferable DX, making the types easier to read for users.
   */
  export type id$Expanded<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = $$Utilities.Simplify<
    | $Select.Indicator.NoArgsIndicator
    | id$SelectionSet<$Scalars>
  >
}

/**
 * [1] These definitions serve to allow field selection interfaces to extend their respective object type without
 *     name clashing between the field name and the object name.
 *
 *     For example imagine \`Query.Foo\` field with type also called \`Foo\`. Our generated interfaces for each field
 *     would end up with an error of \`export interface Foo extends Foo ...\`
 */
export namespace $NamedTypes {
  export type $Mutation<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = Mutation<$Scalars>
  export type $Query<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    Query<$Scalars>
  export type $ABCEnum = ABCEnum
  export type $Case = Case
  export type $InputObject<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = InputObject<$Scalars>
  export type $InputObjectCircular<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = InputObjectCircular<$Scalars>
  export type $InputObjectNested<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = InputObjectNested<$Scalars>
  export type $InputObjectNestedNonNull<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = InputObjectNestedNonNull<$Scalars>
  export type $Bar<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    Bar<$Scalars>
  export type $DateObject1<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = DateObject1<$Scalars>
  export type $DateObject2<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = DateObject2<$Scalars>
  export type $ErrorOne<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = ErrorOne<$Scalars>
  export type $ErrorTwo<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = ErrorTwo<$Scalars>
  export type $Foo<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    Foo<$Scalars>
  export type $Object1<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    Object1<$Scalars>
  export type $Object1ImplementingInterface<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = Object1ImplementingInterface<$Scalars>
  export type $Object2ImplementingInterface<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = Object2ImplementingInterface<$Scalars>
  export type $ObjectNested<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = ObjectNested<$Scalars>
  export type $ObjectUnion<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = ObjectUnion<$Scalars>
  export type $lowerCaseObject<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = lowerCaseObject<$Scalars>
  export type $lowerCaseObject2<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = lowerCaseObject2<$Scalars>
  export type $DateUnion<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = DateUnion<$Scalars>
  export type $FooBarUnion<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = FooBarUnion<$Scalars>
  export type $Result<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    Result<$Scalars>
  export type $lowerCaseUnion<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = lowerCaseUnion<$Scalars>
  export type $DateInterface1<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = DateInterface1<$Scalars>
  export type $Error<$Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty> =
    Error<$Scalars>
  export type $Interface<
    $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Utilities.Schema.Scalar.Registry.Empty,
  > = Interface<$Scalars>
}
"
`;
