// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`custom scalars module results in client prefilling those custom scalars 1`] = `
"import type * as $$Utilities from "graffle/utilities-for-generated";

import * as CustomScalars from "../../scalars.js";

export * from "../../scalars.js";
export { Date } from "../../scalars.js";
//
//
//
//
// CUSTOM SCALAR TYPE
// DATE
// --------------------------------------------------------------------------------------------------
//                                                Date
// --------------------------------------------------------------------------------------------------
//
//

export type Date = typeof CustomScalars.Date;
// Without this we get error:
// "Exported type alias 'DateDecoded' has or is using private name 'Date'."
type Date_ = typeof CustomScalars.Date;
export type DateDecoded = $$Utilities.Schema.Scalar.GetDecoded<Date_>;
export type DateEncoded = $$Utilities.Schema.Scalar.GetEncoded<Date_>;

export * from "graffle/generator-helpers/standard-scalar-types";

//
//
//
//
//
//
// ==================================================================================================
//                                              Registry
// ==================================================================================================
//
//
//
//
//
//

export const $registry = {
  map: {
    Date: Date,
  },
} as $Registry;

export type $Registry = $$Utilities.Schema.Scalar.Registry<
  {
    Date: Date_;
  },
  $$Utilities.Schema.Scalar.GetEncoded<Date_>,
  $$Utilities.Schema.Scalar.GetDecoded<Date_>
>;
"
`;

exports[`root-types-mapped 1`] = `
"import * as $$Data from "./data.js";
import * as $$Scalar from "./scalar.js";
import type { Schema as $ } from "graffle/utilities-for-generated";
import type * as $$Utilities from "graffle/utilities-for-generated";

export namespace Schema {
  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                                Root
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                             QueryRoot
  // --------------------------------------------------------------------------------------------------
  //

  export interface QueryRoot {
    kind: "Object";
    name: "QueryRoot";
    fields: {
      __typename: QueryRoot.__typename;
      id: QueryRoot.id;
    };
  }

  export namespace QueryRoot {
    export interface __typename {
      kind: "OutputField";
      name: "__typename";
      arguments: {};
      inlineType: [1];
      namedType: {
        kind: "__typename";
        value: "QueryRoot";
      };
    }

    export interface id {
      kind: "OutputField";
      name: "id";
      arguments: {};
      inlineType: [0];
      namedType: $$NamedTypes.$$ID;
    }
  }

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                            OutputObject
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                            InputObject
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                             Interface
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                               Union
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                                Enum
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                            ScalarCustom
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                           ScalarStandard
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  //                                                 ID
  // --------------------------------------------------------------------------------------------------
  //

  export type ID = $.StandardTypes.ID;

  //                                              Boolean
  // --------------------------------------------------------------------------------------------------
  //

  export type Boolean = $.StandardTypes.Boolean;

  //                                               String
  // --------------------------------------------------------------------------------------------------
  //

  export type String = $.StandardTypes.String;

  //
  //
  //
  //
  //
  //
  // ==================================================================================================
  //                                         Named Types Index
  // ==================================================================================================
  //
  //
  //
  //
  //
  //

  /**
   * [1] These definitions serve to allow field selection interfaces to extend their respective object type without
   *     name clashing between the field name and the object name.
   *
   *     For example imagine \`Query.Foo\` field with type also called \`Foo\`. Our generated interfaces for each field
   *     would end up with an error of \`export interface Foo extends Foo ...\`
   */

  namespace $$NamedTypes {
    export type $$QueryRoot = QueryRoot;
    export type $$ID = ID;
    export type $$Boolean = Boolean;
    export type $$String = String;
  }
}

//
//
//
//
//
//
// ==================================================================================================
//                                               Schema
// ==================================================================================================
//
//
//
//
//
//

export interface Schema<
  $Scalars extends $$Utilities.Schema.Scalar.Registry = $$Scalar.$Registry,
> {
  name: $$Data.Name;
  operationsAvailable: ["query"];
  RootUnion: Schema.QueryRoot;
  Root: {
    query: Schema.QueryRoot;
    mutation: null;
    subscription: null;
  };
  allTypes: {
    QueryRoot: Schema.QueryRoot;
  };
  objects: {};
  unions: {};
  interfaces: {};
  scalarNamesUnion: "ID" | "Boolean" | "String";
  scalars: {
    ID: Schema.ID;
    Boolean: Schema.Boolean;
    String: Schema.String;
  };
  scalarRegistry: $Scalars;
  extensions: $$Utilities.GlobalRegistry.TypeExtensions;
}
"
`;

exports[`root-types-mapped 2`] = `
"import type * as $$SelectionSets from "./selection-sets.js";
import type * as $$Schema from "./schema.js";
import type * as $$Utilities from "graffle/utilities-for-generated";

export interface QueryRootMethods<$Context extends $$Utilities.Context> {
  $batch: $$Utilities.GraffleKit.Context.Configuration.Check.Preflight<
    $Context,
    <$SelectionSet>(
      selectionSet: $$Utilities.Exact<
        $SelectionSet,
        $$SelectionSets.QueryRoot<$Context["scalars"]>
      >,
    ) => Promise<
      (null | {}) &
        $$Utilities.HandleOutput<
          $Context,
          $$Utilities.DocumentBuilderKit.InferResult.OperationQuery<
            $$Utilities.AssertExtendsObject<$SelectionSet>,
            $$Schema.Schema<$Context["scalars"]>
          >
        >
    >
  >;
  __typename: $$Utilities.GraffleKit.Context.Configuration.Check.Preflight<
    $Context,
    () => Promise<
      (null | {}) &
        $$Utilities.HandleOutputDocumentBuilderRootField<
          $Context,
          { __typename: "QueryRoot" },
          "__typename"
        >
    >
  >;

  id: $$Utilities.GraffleKit.Context.Configuration.Check.Preflight<
    $Context,
    <$SelectionSet>(
      selectionSet?: $$Utilities.Exact<
        $SelectionSet,
        $$SelectionSets.QueryRoot.id<$Context["scalars"]>
      >,
    ) => Promise<
      (null | {}) &
        $$Utilities.HandleOutputDocumentBuilderRootField<
          $Context,
          $$Utilities.DocumentBuilderKit.InferResult.OperationQuery<
            { id: $SelectionSet },
            $$Schema.Schema<$Context["scalars"]>
          >,
          "id"
        >
    >
  >;
}

export interface BuilderMethodsRoot<$Context extends $$Utilities.Context> {
  undefined: QueryRootMethods<$Context>;
}

export interface BuilderMethodsRootFn extends $$Utilities.TypeFunction {
  // @ts-expect-error parameter is Untyped.
  return: BuilderMethodsRoot<this["params"]>;
}
"
`;
