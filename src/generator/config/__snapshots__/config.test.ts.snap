// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`can introspect schema from url 1`] = `
"union Battle = BattleRoyale | BattleTrainer | BattleWild

type BattleRoyale {
  combatants: [CombatantMultiPokemon!]
  date: Float
  id: ID
  winner: Trainer
}

type BattleTrainer {
  combatant1: CombatantSinglePokemon
  combatant2: CombatantSinglePokemon
  date: Float
  id: ID
  winner: Trainer
}

type BattleWild {
  date: Float
  id: ID
  pokemon: Pokemon
  result: BattleWildResult
  trainer: Trainer
  wildPokemons: [Pokemon!]
}

enum BattleWildResult {
  pokemonsCaptured
  pokemonsDefeated
  trainerDefeated
}

interface Being {
  id: ID
  name: String
}

type CombatantMultiPokemon {
  pokemons: [Pokemon!]
  trainer: Trainer
}

type CombatantSinglePokemon {
  pokemon: Pokemon
  trainer: Trainer
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the \`date-time\` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar Date

input DateFilter {
  gte: Date
  lte: Date
}

type Mutation {
  addPokemon(attack: Int, defense: Int, hp: Int, name: String!, type: PokemonType!): Pokemon
}

type Patron implements Being {
  id: ID
  money: Int
  name: String
}

type Pokemon implements Being {
  attack: Int
  birthday: Date
  defense: Int
  hp: Int
  id: ID
  name: String
  trainer: Trainer
  type: PokemonType
}

input PokemonFilter {
  birthday: DateFilter
  name: StringFilter
}

enum PokemonType {
  bug
  electric
  fire
  grass
  water
}

type Query {
  battles: [Battle!]!
  beings: [Being!]!
  pokemon: [Pokemon!]
  pokemonByName(name: String!): [Pokemon!]
  pokemons(filter: PokemonFilter): [Pokemon!]
  trainerByName(name: String!): Trainer
  trainers: [Trainer!]
}

input StringFilter {
  contains: String
  in: [String!]
}

type Trainer implements Being {
  class: TrainerClass
  fans: [Patron!]
  id: ID
  name: String
  pokemon: [Pokemon!]
}

enum TrainerClass {
  bugCatcher
  camper
  picnicker
  psychic
  psychicMedium
  psychicYoungster
  sailor
  superNerd
  tamer
  teamRocketGrunt
  triathlete
  youngster
  youth
}"
`;

exports[`can load schema from custom dir using default file name 1`] = `
"type Query {
	defaultNamedSchemaFile: Boolean
}
"
`;

exports[`can load schema from custom path 1`] = `
"type Query {
	customNamedSchemaFile: Boolean
}
"
`;

exports[`configured schema introspection options are passed to introspection 1`] = `
{
  "query": "
    query IntrospectionQuery {
      __schema {
        
        queryType { name }
        mutationType { name }
        subscriptionType { name }
        types {
          ...FullType
        }
        directives {
          name
          
          
          locations
          args {
            ...InputValue
          }
        }
      }
    }

    fragment FullType on __Type {
      kind
      name
      
      
      
      fields(includeDeprecated: true) {
        name
        
        args {
          ...InputValue
        }
        type {
          ...TypeRef
        }
        isDeprecated
        deprecationReason
      }
      inputFields {
        ...InputValue
      }
      interfaces {
        ...TypeRef
      }
      enumValues(includeDeprecated: true) {
        name
        
        isDeprecated
        deprecationReason
      }
      possibleTypes {
        ...TypeRef
      }
    }

    fragment InputValue on __InputValue {
      name
      
      type { ...TypeRef }
      defaultValue
      
      
    }

    fragment TypeRef on __Type {
      kind
      name
      ofType {
        kind
        name
        ofType {
          kind
          name
          ofType {
            kind
            name
            ofType {
              kind
              name
              ofType {
                kind
                name
                ofType {
                  kind
                  name
                  ofType {
                    kind
                    name
                    ofType {
                      kind
                      name
                      ofType {
                        kind
                        name
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ",
}
`;
