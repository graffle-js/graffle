// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`generates types from GraphQL SDL file 1`] = `
"import type * as $ from '../../../../../src/Schema/__.js'
import type * as $Scalar from './Scalar.ts'

// ------------------------------------------------------------ //
//                             Root                             //
// ------------------------------------------------------------ //

export namespace Root {
  export type Query = $.Object$2<'Query', {
    date: $.Field<$.Output.Nullable<$Scalar.Date>>
    dateNonNull: $.Field<$Scalar.Date>
    dateList: $.Field<$.Output.Nullable<$.Output.List<$.Output.Nullable<$Scalar.Date>>>>
    dateObject1: $.Field<$.Output.Nullable<Object.DateObject1>>
    dateUnion: $.Field<$.Output.Nullable<Union.DateUnion>>
    dateInterface1: $.Field<$.Output.Nullable<Interface.DateInterface1>>
    dateListNonNull: $.Field<$.Output.List<$Scalar.Date>>
    dateArg: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.Nullable<$Scalar.Date>
      }>
    >
    dateArgNonNull: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $Scalar.Date
      }>
    >
    dateArgList: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.Nullable<$.Input.List<$.Input.Nullable<$Scalar.Date>>>
      }>
    >
    dateArgNonNullList: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.List<$.Input.Nullable<$Scalar.Date>>
      }>
    >
    dateArgNonNullListNonNull: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        date: $.Input.List<$Scalar.Date>
      }>
    >
    dateArgInputObject: $.Field<
      $.Output.Nullable<$Scalar.Date>,
      $.Args<{
        input: $.Input.Nullable<InputObject.InputObject>
      }>
    >
    interface: $.Field<$.Output.Nullable<Interface.Interface>>
    id: $.Field<$.Output.Nullable<$Scalar.ID>>
    idNonNull: $.Field<$Scalar.ID>
    string: $.Field<$.Output.Nullable<$Scalar.String>>
    stringWithRequiredArg: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        string: $Scalar.String
      }>
    >
    stringWithArgs: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        string: $.Input.Nullable<$Scalar.String>
        int: $.Input.Nullable<$Scalar.Int>
        float: $.Input.Nullable<$Scalar.Float>
        boolean: $.Input.Nullable<$Scalar.Boolean>
        id: $.Input.Nullable<$Scalar.ID>
      }>
    >
    stringWithArgEnum: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        ABCEnum: $.Input.Nullable<Enum.ABCEnum>
      }>
    >
    stringWithListArg: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        ints: $.Input.Nullable<$.Input.List<$.Input.Nullable<$Scalar.Int>>>
      }>
    >
    stringWithListArgRequired: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        ints: $.Input.List<$.Input.Nullable<$Scalar.Int>>
      }>
    >
    stringWithArgInputObject: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        input: $.Input.Nullable<InputObject.InputObject>
      }>
    >
    stringWithArgInputObjectRequired: $.Field<
      $.Output.Nullable<$Scalar.String>,
      $.Args<{
        input: InputObject.InputObject
      }>
    >
    listListIntNonNull: $.Field<$.Output.List<$.Output.List<$Scalar.Int>>>
    listListInt: $.Field<
      $.Output.Nullable<$.Output.List<$.Output.Nullable<$.Output.List<$.Output.Nullable<$Scalar.Int>>>>>
    >
    listInt: $.Field<$.Output.Nullable<$.Output.List<$.Output.Nullable<$Scalar.Int>>>>
    listIntNonNull: $.Field<$.Output.List<$Scalar.Int>>
    object: $.Field<$.Output.Nullable<Object.Object1>>
    objectNonNull: $.Field<Object.Object1>
    objectNested: $.Field<$.Output.Nullable<Object.ObjectNested>>
    objectWithArgs: $.Field<
      $.Output.Nullable<Object.Object1>,
      $.Args<{
        string: $.Input.Nullable<$Scalar.String>
        int: $.Input.Nullable<$Scalar.Int>
        float: $.Input.Nullable<$Scalar.Float>
        boolean: $.Input.Nullable<$Scalar.Boolean>
        id: $.Input.Nullable<$Scalar.ID>
      }>
    >
    fooBarUnion: $.Field<$.Output.Nullable<Union.FooBarUnion>>
    /**
     * Query enum field documentation.
     */
    abcEnum: $.Field<$.Output.Nullable<Enum.ABCEnum>>
    lowerCaseUnion: $.Field<$.Output.Nullable<Union.lowerCaseUnion>>
  }>
}

// ------------------------------------------------------------ //
//                             Enum                             //
// ------------------------------------------------------------ //

export namespace Enum {
  /**
   * Enum documentation.
   *
   * Members
   * "A" - (DEPRECATED: Enum value A is deprecated.)
   * "B" - Enum B member documentation.
   * "C" - Enum C member documentation. (DEPRECATED: Enum value C is deprecated.)
   */
  export type ABCEnum = $.Enum<'ABCEnum', ['A', 'B', 'C']>
}

// ------------------------------------------------------------ //
//                         InputObject                          //
// ------------------------------------------------------------ //

export namespace InputObject {
  export type InputObject = $.InputObject<'InputObject', {
    id: $.Input.Nullable<$Scalar.ID>
    idRequired: $Scalar.ID
    date: $.Input.Nullable<$Scalar.Date>
    dateRequired: $Scalar.Date
  }>
}

// ------------------------------------------------------------ //
//                          Interface                           //
// ------------------------------------------------------------ //

export namespace Interface {
  export type DateInterface1 = $.Interface<'DateInterface1', {
    date1: $.Field<$.Output.Nullable<$Scalar.Date>>
  }, [Object.DateObject1]>

  export type Interface = $.Interface<'Interface', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>>
  }, [Object.Object1ImplementingInterface, Object.Object2ImplementingInterface]>
}

// ------------------------------------------------------------ //
//                            Object                            //
// ------------------------------------------------------------ //

export namespace Object {
  export type DateObject1 = $.Object$2<'DateObject1', {
    date1: $.Field<$.Output.Nullable<$Scalar.Date>>
  }>

  export type DateObject2 = $.Object$2<'DateObject2', {
    date2: $.Field<$.Output.Nullable<$Scalar.Date>>
  }>

  /**
   * Object documentation.
   */
  export type Foo = $.Object$2<'Foo', {
    /**
     * Field documentation.
     *
     * @deprecated Field a is deprecated.
     */
    id: $.Field<$.Output.Nullable<$Scalar.ID>>
  }>

  export type Bar = $.Object$2<'Bar', {
    int: $.Field<$.Output.Nullable<$Scalar.Int>>
  }>

  export type ObjectNested = $.Object$2<'ObjectNested', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>>
    object: $.Field<$.Output.Nullable<Object.Object1>>
  }>

  export type lowerCaseObject = $.Object$2<'lowerCaseObject', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>>
  }>

  export type lowerCaseObject2 = $.Object$2<'lowerCaseObject2', {
    int: $.Field<$.Output.Nullable<$Scalar.Int>>
  }>

  export type Object1 = $.Object$2<'Object1', {
    string: $.Field<$.Output.Nullable<$Scalar.String>>
    int: $.Field<$.Output.Nullable<$Scalar.Int>>
    float: $.Field<$.Output.Nullable<$Scalar.Float>>
    boolean: $.Field<$.Output.Nullable<$Scalar.Boolean>>
    id: $.Field<$.Output.Nullable<$Scalar.ID>>
  }>

  export type Object1ImplementingInterface = $.Object$2<'Object1ImplementingInterface', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>>
    int: $.Field<$.Output.Nullable<$Scalar.Int>>
  }>

  export type Object2ImplementingInterface = $.Object$2<'Object2ImplementingInterface', {
    id: $.Field<$.Output.Nullable<$Scalar.ID>>
    boolean: $.Field<$.Output.Nullable<$Scalar.Boolean>>
  }>
}

// ------------------------------------------------------------ //
//                            Union                             //
// ------------------------------------------------------------ //

export namespace Union {
  export type DateUnion = $.Union<'DateUnion', [Object.DateObject1, Object.DateObject2]>

  /**
   * Union documentation.
   */
  export type FooBarUnion = $.Union<'FooBarUnion', [Object.Foo, Object.Bar]>

  export type lowerCaseUnion = $.Union<'lowerCaseUnion', [Object.lowerCaseObject, Object.lowerCaseObject2]>
}
"
`;

exports[`generates types from GraphQL SDL file 2`] = `
"import type * as CustomScalar from '../customScalarCodecs.js'

declare global {
  interface SchemaCustomScalars {
    Date: CustomScalar.Date
  }
}

export * from '../../../../../src/Schema/NamedType/Scalar/Scalar.js'
export * from '../customScalarCodecs.js'
"
`;

exports[`generates types from GraphQL SDL file 3`] = `
"import * as _ from '../../../../../src/Schema/__.js'
import * as $Scalar from './Scalar.js'

export const ABCEnum = _.Enum(\`ABCEnum\`, [\`A\`, \`B\`, \`C\`])

export const InputObject = _.InputObject(\`InputObject\`, {
  id: _.Input.field(_.Input.Nullable($Scalar.ID)),
  idRequired: _.Input.field($Scalar.ID),
  date: _.Input.field(_.Input.Nullable($Scalar.Date)),
  dateRequired: _.Input.field($Scalar.Date),
})

export const DateObject1 = _.Object$(\`DateObject1\`, {
  date1: _.Output.field(_.Output.Nullable($Scalar.Date)),
})

export const DateObject2 = _.Object$(\`DateObject2\`, {
  date2: _.Output.field(_.Output.Nullable($Scalar.Date)),
})

export const Foo = _.Object$(\`Foo\`, {
  id: _.Output.field(_.Output.Nullable($Scalar.ID)),
})

export const Bar = _.Object$(\`Bar\`, {
  int: _.Output.field(_.Output.Nullable($Scalar.Int)),
})

export const ObjectNested = _.Object$(\`ObjectNested\`, {
  id: _.Output.field(_.Output.Nullable($Scalar.ID)),
  object: _.Output.field(_.Output.Nullable(() => Object1)),
})

export const lowerCaseObject = _.Object$(\`lowerCaseObject\`, {
  id: _.Output.field(_.Output.Nullable($Scalar.ID)),
})

export const lowerCaseObject2 = _.Object$(\`lowerCaseObject2\`, {
  int: _.Output.field(_.Output.Nullable($Scalar.Int)),
})

export const Object1 = _.Object$(\`Object1\`, {
  string: _.Output.field(_.Output.Nullable($Scalar.String)),
  int: _.Output.field(_.Output.Nullable($Scalar.Int)),
  float: _.Output.field(_.Output.Nullable($Scalar.Float)),
  boolean: _.Output.field(_.Output.Nullable($Scalar.Boolean)),
  id: _.Output.field(_.Output.Nullable($Scalar.ID)),
})

export const Object1ImplementingInterface = _.Object$(\`Object1ImplementingInterface\`, {
  id: _.Output.field(_.Output.Nullable($Scalar.ID)),
  int: _.Output.field(_.Output.Nullable($Scalar.Int)),
})

export const Object2ImplementingInterface = _.Object$(\`Object2ImplementingInterface\`, {
  id: _.Output.field(_.Output.Nullable($Scalar.ID)),
  boolean: _.Output.field(_.Output.Nullable($Scalar.Boolean)),
})

export const DateUnion = _.Union(\`DateUnion\`, [DateObject1, DateObject2])

export const FooBarUnion = _.Union(\`FooBarUnion\`, [Foo, Bar])

export const lowerCaseUnion = _.Union(\`lowerCaseUnion\`, [lowerCaseObject, lowerCaseObject2])

export const DateInterface1 = _.Interface(
  \`DateInterface1\`,
  { date1: _.Output.field(_.Output.Nullable($Scalar.Date)) },
  [DateObject1],
)
export const Interface = _.Interface(\`Interface\`, { id: _.Output.field(_.Output.Nullable($Scalar.ID)) }, [
  Object1ImplementingInterface,
  Object2ImplementingInterface,
])

export const Query = _.Object$(\`Query\`, {
  date: _.Output.field(_.Output.Nullable($Scalar.Date)),
  dateNonNull: _.Output.field($Scalar.Date),
  dateList: _.Output.field(_.Output.Nullable(_.Output.List(_.Output.Nullable($Scalar.Date)))),
  dateObject1: _.Output.field(_.Output.Nullable(() => DateObject1)),
  dateUnion: _.Output.field(_.Output.Nullable(() => DateUnion)),
  dateInterface1: _.Output.field(_.Output.Nullable(() => DateInterface1)),
  dateListNonNull: _.Output.field(_.Output.List($Scalar.Date)),
  dateArg: _.Output.field(_.Output.Nullable($Scalar.Date), _.Args({ date: _.Input.Nullable($Scalar.Date) })),
  dateArgNonNull: _.Output.field(_.Output.Nullable($Scalar.Date), _.Args({ date: $Scalar.Date })),
  dateArgList: _.Output.field(
    _.Output.Nullable($Scalar.Date),
    _.Args({ date: _.Input.Nullable(_.Input.List(_.Input.Nullable($Scalar.Date))) }),
  ),
  dateArgNonNullList: _.Output.field(
    _.Output.Nullable($Scalar.Date),
    _.Args({ date: _.Input.List(_.Input.Nullable($Scalar.Date)) }),
  ),
  dateArgNonNullListNonNull: _.Output.field(
    _.Output.Nullable($Scalar.Date),
    _.Args({ date: _.Input.List($Scalar.Date) }),
  ),
  dateArgInputObject: _.Output.field(_.Output.Nullable($Scalar.Date), _.Args({ input: _.Input.Nullable(InputObject) })),
  interface: _.Output.field(_.Output.Nullable(() => Interface)),
  id: _.Output.field(_.Output.Nullable($Scalar.ID)),
  idNonNull: _.Output.field($Scalar.ID),
  string: _.Output.field(_.Output.Nullable($Scalar.String)),
  stringWithRequiredArg: _.Output.field(_.Output.Nullable($Scalar.String), _.Args({ string: $Scalar.String })),
  stringWithArgs: _.Output.field(
    _.Output.Nullable($Scalar.String),
    _.Args({
      string: _.Input.Nullable($Scalar.String),
      int: _.Input.Nullable($Scalar.Int),
      float: _.Input.Nullable($Scalar.Float),
      boolean: _.Input.Nullable($Scalar.Boolean),
      id: _.Input.Nullable($Scalar.ID),
    }),
  ),
  stringWithArgEnum: _.Output.field(_.Output.Nullable($Scalar.String), _.Args({ ABCEnum: _.Input.Nullable(ABCEnum) })),
  stringWithListArg: _.Output.field(
    _.Output.Nullable($Scalar.String),
    _.Args({ ints: _.Input.Nullable(_.Input.List(_.Input.Nullable($Scalar.Int))) }),
  ),
  stringWithListArgRequired: _.Output.field(
    _.Output.Nullable($Scalar.String),
    _.Args({ ints: _.Input.List(_.Input.Nullable($Scalar.Int)) }),
  ),
  stringWithArgInputObject: _.Output.field(
    _.Output.Nullable($Scalar.String),
    _.Args({ input: _.Input.Nullable(InputObject) }),
  ),
  stringWithArgInputObjectRequired: _.Output.field(_.Output.Nullable($Scalar.String), _.Args({ input: InputObject })),
  listListIntNonNull: _.Output.field(_.Output.List(_.Output.List($Scalar.Int))),
  listListInt: _.Output.field(
    _.Output.Nullable(_.Output.List(_.Output.Nullable(_.Output.List(_.Output.Nullable($Scalar.Int))))),
  ),
  listInt: _.Output.field(_.Output.Nullable(_.Output.List(_.Output.Nullable($Scalar.Int)))),
  listIntNonNull: _.Output.field(_.Output.List($Scalar.Int)),
  object: _.Output.field(_.Output.Nullable(() => Object1)),
  objectNonNull: _.Output.field(() => Object1),
  objectNested: _.Output.field(_.Output.Nullable(() => ObjectNested)),
  objectWithArgs: _.Output.field(
    _.Output.Nullable(() => Object1),
    _.Args({
      string: _.Input.Nullable($Scalar.String),
      int: _.Input.Nullable($Scalar.Int),
      float: _.Input.Nullable($Scalar.Float),
      boolean: _.Input.Nullable($Scalar.Boolean),
      id: _.Input.Nullable($Scalar.ID),
    }),
  ),
  fooBarUnion: _.Output.field(_.Output.Nullable(() => FooBarUnion)),
  abcEnum: _.Output.field(_.Output.Nullable(ABCEnum)),
  lowerCaseUnion: _.Output.field(_.Output.Nullable(() => lowerCaseUnion)),
})

export const $Index = {
  Root: {
    Query,
    Mutation: null,
    Subscription: null,
  },
  objects: {
    DateObject1,
    DateObject2,
    Foo,
    Bar,
    ObjectNested,
    lowerCaseObject,
    lowerCaseObject2,
    Object1,
    Object1ImplementingInterface,
    Object2ImplementingInterface,
  },
  unions: {
    DateUnion,
    FooBarUnion,
    lowerCaseUnion,
  },
}
"
`;
